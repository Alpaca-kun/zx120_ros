/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-12-15 22:32:12.235819
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.508211297439247)*x0);
x11=((0.721788702560753)*x6);
x12=((2.519)*x7);
x13=((0.60565763679276)*x6);
x14=((0.642790725366564)*x6);
x15=((0.508211297439247)*x7);
x16=((0.60565763679276)*x7);
x17=((0.60565763679276)*x5);
x18=((1.0)*x0);
x19=((0.766041828742221)*x5);
x20=((0.642790725366564)*x5);
x21=((0.60565763679276)*x0);
x22=((0.766041828742221)*x6);
x23=((0.721788702560753)*x5);
x24=((2.519)*x0);
x25=(x2*x4);
x26=(x1*x3);
x27=(x3*x7);
x28=(x1*x2);
x29=(x3*x4);
x30=((1.0)*x26);
x31=(x28*x7);
x32=(x28+x29);
x33=((((-1.0)*x30))+x25);
x34=((((-1.0)*x25))+x30);
x35=(x32*x5);
x36=(((x0*x25))+(((-1.0)*x18*x26)));
x37=(x7*(((((-1.0)*x30))+x25)));
x38=(x18*((x28+x29)));
x39=((((1.0)*x27*x4))+(((1.0)*x31)));
x40=((-1.0)*x38);
x41=((-1.0)*x39);
x42=(x36*x6);
x43=(x37*x5);
x44=(x39*x5);
IkReal x45=((1.0)*x21);
IkReal x46=((1.0)*x10);
IkReal x47=((1.0)*x36);
eetrans[0]=(((x5*(((((-1.0)*x29*x46))+(((-1.0)*x28*x46))))))+(((4.6)*x0*x3))+((x6*(((((-1.0)*x25*x46))+((x10*x26))))))+(((0.16443)*x7))+(((0.14)*x0))+(((-1.0)*x24*x25))+((x5*((((x21*x25))+(((-1.0)*x26*x45))))))+(((-1.0)*x11*x47))+((x6*(((((-1.0)*x29*x45))+(((-1.0)*x28*x45))))))+((x24*x26))+(((-1.0)*x17*x47))+(((-1.0)*x23*x38))+(((-1.0)*x13*x40)));
IkReal x48=((1.0)*x25);
IkReal x49=((1.0)*x16);
IkReal x50=((1.0)*x15);
IkReal x51=((1.0)*x37);
eetrans[1]=((((-1.0)*x17*x51))+((x5*(((((-1.0)*x28*x50))+(((-1.0)*x29*x50))))))+((x5*(((((-1.0)*x26*x49))+((x16*x25))))))+(((-0.16443)*x0))+((x6*(((((-1.0)*x15*x48))+((x15*x26))))))+(((4.6)*x27))+(((0.14)*x7))+(((-1.0)*x11*x51))+((x12*x26))+(((-1.0)*x12*x48))+(((-1.0)*x23*x39))+((x6*(((((-1.0)*x29*x49))+(((-1.0)*x28*x49))))))+(((-1.0)*x13*x41)));
IkReal x52=((1.0)*x32);
eetrans[2]=((1.424)+(((-1.0)*x17*x52))+(((-2.519)*x29))+(((-2.519)*x28))+((x6*(((((-0.508211297439247)*x29))+(((-0.508211297439247)*x28))))))+(((-1.0)*x11*x52))+(((-1.0)*x13*x33))+(((-1.0)*x23*x34))+(((-4.6)*x2))+((x5*(((((0.60565763679276)*x28))+(((0.60565763679276)*x29))))))+((x6*(((((-0.60565763679276)*x26))+(((0.60565763679276)*x25))))))+((x5*(((((-0.508211297439247)*x26))+(((0.508211297439247)*x25)))))));
eerot[0]=(((x7*x9))+((x8*((((x19*x36))+(((-1.0)*x20*x38))+(((-1.0)*x14*x36))+((x22*x40)))))));
eerot[1]=((((-1.0)*x18*x9))+((x8*((((x19*x37))+(((-1.0)*x20*x39))+(((-1.0)*x14*x37))+((x22*x41)))))));
eerot[2]=(x8*((((x19*x32))+(((-1.0)*x20*x34))+(((-1.0)*x14*x32))+((x22*x33)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-1.424)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x55 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x55.valid){
continue;
}
IkReal x53=((1.0)*(x55.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x56=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x56.valid){
continue;
}
if( (((0.16443)*(x56.value))) < -1-IKFAST_SINCOS_THRESH || (((0.16443)*(x56.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x54=IKasin(((0.16443)*(x56.value)));
j0array[0]=(x54+(((-1.0)*x53)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x53))+(((-1.0)*x54)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[8+1], zeror[8];
int numroots;
IkReal x57=py*py;
IkReal x58=px*px;
IkReal x59=pz*pz;
IkReal x60=(cj0*r00);
IkReal x61=(r02*sj0);
IkReal x62=(cj0*r01);
IkReal x63=(r01*sj0);
IkReal x64=((0.65772)*px);
IkReal x65=(cj0*r02);
IkReal x66=((0.56)*px);
IkReal x67=((0.65772)*py);
IkReal x68=((2.0)*px);
IkReal x69=((0.32886)*px);
IkReal x70=(py*sj0);
IkReal x71=(px*r00);
IkReal x72=(py*pz);
IkReal x73=((12.4363995800822)*pz);
IkReal x74=((2.48073428793653)*pz);
IkReal x75=(cj0*px);
IkReal x76=((0.56)*pz);
IkReal x77=((0.32886)*pz);
IkReal x78=(r00*sj0);
IkReal x79=(py*r01);
IkReal x80=((4.0)*px);
IkReal x81=((0.32886)*py);
IkReal x82=((0.65772)*pz);
IkReal x83=(pz*r02);
IkReal x84=((11.8763995800822)*pz);
IkReal x85=((0.4044978)*px*sj0);
IkReal x86=((1.23)*x59);
IkReal x87=((1.23)*x58);
IkReal x88=((0.4044978)*cj0*py);
IkReal x89=((1.23)*x57);
IkReal x90=((0.407907138965403)*x62);
IkReal x91=((2.48073428793653)*x71);
IkReal x92=(r02*x74);
IkReal x93=((2.48073428793653)*x79);
IkReal x94=((0.407907138965403)*x78);
IkReal x95=(r01*x69);
IkReal x96=(r00*x81);
IkReal x97=((1.0)*x57);
IkReal x98=((1.0)*x59);
IkReal x99=((2.0)*x58);
IkReal x100=((1.0)*x58);
IkReal x101=((2.0)*x57);
IkReal x102=(r02*x59);
IkReal x103=((2.0)*x59);
IkReal x104=(x61*x69);
IkReal x105=(x62*x77);
IkReal x106=(pz*r00*x68);
IkReal x107=((2.0)*r01*x72);
IkReal x108=(x65*x81);
IkReal x109=(x77*x78);
IkReal x110=((2.48073428793653)*px*x65);
IkReal x111=((2.48073428793653)*py*x61);
IkReal x112=(x60*x74);
IkReal x113=(x63*x74);
IkReal x114=((2.0)*x61*x72);
IkReal x115=(r00*x68*x70);
IkReal x116=(py*x62*x68);
IkReal x117=(pz*x65*x68);
IkReal x118=((3.4701744)+(((-24.78696)*x75))+(((-24.78696)*x70)));
IkReal x119=(x113+x112);
IkReal x120=(x108+x109);
IkReal x121=(x111+x110);
IkReal x122=(x88+x89+x86+x87);
IkReal x123=(x91+x90+x93+x92);
IkReal x124=(x104+x105+x106+x107);
IkReal x125=((-62.984878416627)+(((17.85714)*x75))+(((17.85714)*x70))+(((-1.0)*x122))+x85);
IkReal x126=((-4.239783216627)+(((-1.0)*x122))+x85+(((5.46366)*x70))+(((5.46366)*x75)));
IkReal x127=((-58.081311216627)+(((-1.0)*x122))+(((-17.16834)*x75))+(((-17.16834)*x70))+x85);
IkReal x128=((-2.806390416627)+(((-1.0)*x122))+x85+(((-4.77486)*x70))+(((-4.77486)*x75)));
IkReal x129=(x117+x116+x115+x114+x95);
IkReal x130=((((21.3977830191009)*r02))+(((2.0)*x102))+((x62*x82))+(((-1.0)*x63*x76))+(((4.0)*r01*x72))+(((-1.0)*x60*x76))+(((-13.3046516794122)*x63))+(((-13.3046516794122)*x60))+((x61*x64))+(((-1.0)*x78*x82))+(((-1.0)*r02*x101))+(((-1.0)*x65*x67))+(((0.56)*py*x61))+(((4.0)*pz*x71))+(((-1.0)*r02*x99))+((x65*x66)));
IkReal x131=((((-16.517732409621)*x63))+(((-16.517732409621)*x60))+((r02*x58))+((r02*x57))+(((-1.0)*x124))+x123+x120+(((37.347080568417)*r02))+((x60*x73))+((x63*x73))+(((-1.0)*x94))+(((-12.4363995800822)*py*x61))+(((-1.0)*r02*x98))+(((-12.4363995800822)*px*x65)));
IkReal x132=((((15.8231268089988)*x63))+(((15.8231268089988)*x60))+(((-11.8763995800822)*px*x65))+(((-33.943288685994)*r02))+((x63*x84))+(((-1.0)*x120))+x124+x123+x102+((x60*x84))+(((-1.0)*r02*x100))+(((-1.0)*x94))+(((-11.8763995800822)*py*x61))+(((-1.0)*r02*x97)));
IkReal x133=(((x101*x60))+(((0.56)*x79))+(((0.0920808)*x62))+(((-0.0920808)*x78))+((x63*x99))+((r02*x76))+(((-1.0)*py*x62*x80))+((r00*x66))+((r00*x67))+(((-1.0)*r01*x64))+(((-1.0)*x60*x99))+(((-4.0)*x70*x71))+((x103*x63))+((x103*x60))+(((-4.0)*x61*x72))+(((-1.0)*x101*x63))+(((32.3408592186199)*r02))+(((-1.0)*pz*x65*x80))+(((71.2119692544111)*x63))+(((71.2119692544111)*x60)));
IkReal x134=((((-6.99962864001721)*r02))+(((-1.0)*x63*x97))+((x59*x63))+((x59*x60))+(((7.39839958008217)*x83))+(((7.39839958008217)*x79))+(((7.39839958008217)*x71))+(((-11.734667450762)*x63))+(((-11.734667450762)*x60))+((x58*x63))+(((-1.0)*x119))+(((-1.0)*x129))+x121+((x57*x60))+x96+(((-1.21651884295291)*x78))+(((-1.0)*x100*x60))+(((1.21651884295291)*x62)));
IkReal x135=((((6.83839958008217)*x79))+(((6.83839958008217)*x71))+(((-1.0)*x63*x98))+((x58*x60))+(((-1.0)*x119))+x121+x129+(((-1.12443804295291)*x78))+(((6.83839958008217)*x83))+((x57*x63))+(((-1.0)*x60*x97))+(((-1.0)*x60*x98))+(((9.74151556833895)*x63))+(((9.74151556833895)*x60))+(((1.12443804295291)*x62))+(((-1.0)*x96))+(((-1.0)*x100*x63))+(((6.30502303939499)*r02)));
IkReal gconst0=x125;
IkReal gconst1=x126;
IkReal gconst2=x131;
IkReal gconst3=x134;
IkReal gconst4=x125;
IkReal gconst5=x126;
IkReal gconst6=x131;
IkReal gconst7=x134;
IkReal gconst8=x118;
IkReal gconst9=x133;
IkReal gconst10=x130;
IkReal gconst11=x118;
IkReal gconst12=x133;
IkReal gconst13=x130;
IkReal gconst14=x127;
IkReal gconst15=x128;
IkReal gconst16=x132;
IkReal gconst17=x135;
IkReal gconst18=x127;
IkReal gconst19=x128;
IkReal gconst20=x132;
IkReal gconst21=x135;
IkReal x136=pz*pz;
IkReal x137=(gconst1*gconst12);
IkReal x138=(gconst11*gconst17);
IkReal x139=((10.23852)*gconst18);
IkReal x140=((1.0)*gconst4);
IkReal x141=(gconst15*gconst7);
IkReal x142=((35.02548)*gconst15);
IkReal x143=(gconst15*gconst6);
IkReal x144=(gconst11*gconst3);
IkReal x145=(gconst17*gconst6);
IkReal x146=((12.39348)*pz);
IkReal x147=((10.23852)*pz);
IkReal x148=(gconst17*gconst21);
IkReal x149=(gconst13*gconst3);
IkReal x150=(gconst12*gconst9);
IkReal x151=((35.02548)*gconst1);
IkReal x152=((1.0)*gconst19);
IkReal x153=(gconst1*gconst16);
IkReal x154=(gconst20*gconst5);
IkReal x155=(gconst16*gconst20);
IkReal x156=((1.0)*gconst5);
IkReal x157=(gconst1*gconst21);
IkReal x158=(gconst12*gconst15);
IkReal x159=(gconst1*gconst10);
IkReal x160=(gconst2*gconst20);
IkReal x161=(gconst10*gconst4);
IkReal x162=(gconst15*gconst17);
IkReal x163=((1.0)*gconst18);
IkReal x164=(gconst1*gconst17);
IkReal x165=(gconst20*gconst3);
IkReal x166=(gconst12*gconst5);
IkReal x167=(gconst10*gconst13);
IkReal x168=(gconst11*gconst20);
IkReal x169=(gconst2*gconst6);
IkReal x170=((1.0)*gconst1);
IkReal x171=(gconst10*gconst6);
IkReal x172=(gconst10*gconst20);
IkReal x173=(gconst15*gconst20);
IkReal x174=(gconst1*gconst9);
IkReal x175=(gconst10*gconst15);
IkReal x176=(gconst1*gconst6);
IkReal x177=(gconst21*gconst3);
IkReal x178=(gconst3*gconst7);
IkReal x179=(gconst10*gconst12);
IkReal x180=((1.0)*gconst15);
IkReal x181=(gconst13*gconst17);
IkReal x182=(gconst1*gconst20);
IkReal x183=((35.02548)*pz);
IkReal x184=(gconst16*gconst6);
IkReal x185=(gconst10*gconst11);
IkReal x186=(gconst6*gconst9);
IkReal x187=(gconst10*pz);
IkReal x188=(gconst20*gconst9);
IkReal x189=(gconst17*gconst7*pz);
IkReal x190=((126.8908928496)*x136);
IkReal x191=(gconst9*x152);
IkReal x192=((104.8272917904)*x136);
IkReal x193=((358.6090774896)*x136);
IkReal x194=(gconst10*x193);
IkReal x195=(gconst12*gconst19*x147);
IkReal x196=(x156*x176);
IkReal x197=(gconst20*x146*x162);
IkReal x198=(gconst17*gconst20*x190);
IkReal x199=(gconst17*x146*x158);
IkReal x200=(gconst15*x146*x172);
IkReal x201=(gconst12*gconst17*x190);
IkReal x202=(x172*x190);
IkReal x203=(gconst20*x146*x164);
IkReal x204=(gconst10*x146*x158);
IkReal x205=(gconst17*x143*x146);
IkReal x206=(gconst15*x146*x165);
IkReal x207=(x145*x190);
IkReal x208=(x179*x190);
IkReal x209=(x165*x190);
IkReal x210=(gconst10*x143*x146);
IkReal x211=(gconst3*x146*x158);
IkReal x212=(gconst17*x137*x146);
IkReal x213=(gconst20*x146*x159);
IkReal x214=(x171*x190);
IkReal x215=(gconst12*gconst3*x190);
IkReal x216=(gconst1*x146*x165);
IkReal x217=(gconst10*x137*x146);
IkReal x218=(gconst3*x143*x146);
IkReal x219=(gconst1*x145*x146);
IkReal x220=(gconst3*gconst6*x190);
IkReal x221=(gconst6*x146*x159);
IkReal x222=(gconst3*x137*x146);
IkReal x223=(gconst3*x146*x176);
IkReal x224=(x202+x201);
IkReal x225=(x214+x215);
IkReal x226=(x199+x200);
IkReal x227=(x221+x222);
IkReal x228=(x207+x209+x208);
IkReal x229=(x210+x211+x212+x213);
IkReal x230=(x216+x217+x218+x219);
IkReal x231=(x206+x205+x204+x203);
op[0]=((((-1.0)*gconst15*x148*x163))+(((-1.0)*gconst15*x152*x155))+x197);
op[1]=((((-1.0)*gconst21*x163*x175))+((gconst15*x147*x155))+((gconst19*x147*x155))+((pz*x142*x148))+(((-1.0)*x198))+((x138*x173))+x226+(((-1.0)*gconst16*x152*x158))+(((-1.0)*x173*x191))+(((-1.0)*gconst13*x162*x163))+((pz*x139*x148)));
op[2]=((((-1.0)*gconst1*x148*x163))+(((-1.0)*gconst15*x152*x160))+(((-1.0)*gconst15*x163*x177))+(((-1.0)*gconst15*x140*x148))+(((-1.0)*gconst15*x163*x167))+(((-1.0)*x155*x192))+((gconst9*x147*x173))+((x168*x175))+((gconst21*x142*x187))+(((-1.0)*x197))+((gconst21*x139*x187))+(((-1.0)*gconst16*x143*x152))+(((-1.0)*gconst17*x141*x163))+((x138*x158))+(((-1.0)*gconst16*x154*x180))+((gconst16*x147*x158))+((pz*x142*x181))+x231+((gconst16*x195))+(((-1.0)*x148*x193))+(((-1.0)*gconst20*x152*x153))+((gconst19*x147*x188))+(((-1.0)*gconst15*x150*x152))+((pz*x139*x181))+(((-1.0)*gconst20*x138*x147))+(((-1.0)*x224)));
op[3]=(((gconst15*x147*x150))+((x144*x173))+(((-1.0)*gconst13*x140*x162))+(((-1.0)*x188*x192))+((x138*x182))+((gconst19*x147*x150))+(((-1.0)*gconst13*x163*x164))+(((-1.0)*gconst12*gconst16*x192))+(((-1.0)*gconst10*x141*x163))+((pz*x142*x167))+(((-1.0)*gconst2*x152*x158))+((pz*x142*x177))+((x138*x143))+(((-1.0)*gconst21*x194))+(((-1.0)*gconst10*x147*x168))+x198+(((-1.0)*gconst16*x137*x152))+((gconst16*x147*x154))+(((-1.0)*gconst12*x138*x147))+((gconst20*x147*x153))+x229+((gconst16*x143*x147))+(((-1.0)*gconst10*x157*x163))+(((-1.0)*gconst9*x154*x180))+((pz*x139*x167))+(((-1.0)*gconst21*x140*x175))+((pz*x139*x177))+((pz*x148*x151))+((gconst19*x147*x184))+(((-1.0)*gconst20*x152*x174))+((gconst15*x147*x160))+(((-1.0)*gconst16*x156*x158))+(((-1.0)*x143*x191))+((gconst17*x141*x183))+(((-1.0)*gconst15*x149*x163))+((gconst4*x147*x148))+(((-1.0)*x181*x193))+((gconst19*x147*x160))+(((-1.0)*x228))+(((-1.0)*x226))+((x158*x185))+((x139*x189)));
op[4]=(((gconst2*x195))+((gconst9*x147*x154))+(((-1.0)*gconst2*x154*x180))+(((-1.0)*x160*x192))+(((-1.0)*gconst20*x144*x147))+((pz*x142*x149))+((gconst16*x137*x147))+((x144*x158))+((gconst10*x141*x183))+(((-1.0)*gconst15*x140*x167))+(((-1.0)*gconst1*x152*x160))+(((-1.0)*x150*x192))+(((-1.0)*gconst6*x152*x153))+(((-1.0)*gconst17*gconst7*x193))+(((-1.0)*gconst15*x140*x177))+((x137*x138))+((gconst2*x147*x158))+((gconst16*x147*x166))+(((-1.0)*gconst16*x143*x156))+((gconst21*x151*x187))+(((-1.0)*gconst11*x147*x179))+(((-1.0)*gconst1*x140*x148))+(((-1.0)*x231))+x224+x230+(((-1.0)*x184*x192))+(((-1.0)*x177*x193))+(((-1.0)*gconst2*x143*x152))+(((-1.0)*gconst3*x157*x163))+((gconst9*x143*x147))+(((-1.0)*x153*x154))+(((-1.0)*gconst6*x138*x147))+(((-1.0)*gconst13*x159*x163))+((gconst21*x147*x161))+(((-1.0)*gconst17*x140*x141))+((gconst20*x147*x174))+((pz*x151*x181))+((gconst19*x147*x186))+(((-1.0)*gconst3*x141*x163))+(((-1.0)*gconst15*x150*x156))+(((-1.0)*x137*x191))+((pz*x139*x149))+(((-1.0)*gconst7*x163*x164))+((gconst4*x147*x181))+(((-1.0)*x167*x193))+((x159*x168))+(((-1.0)*x225))+((x143*x185))+((gconst7*x139*x187)));
op[5]=(((gconst6*x147*x153))+((x144*x182))+(((-1.0)*gconst12*gconst2*x192))+((x151*x189))+(((-1.0)*gconst15*x140*x149))+(((-1.0)*gconst13*x140*x164))+(((-1.0)*gconst9*x143*x156))+(((-1.0)*x149*x193))+(((-1.0)*gconst6*x152*x174))+((gconst13*x147*x161))+(((-1.0)*gconst2*x156*x158))+((x137*x185))+(((-1.0)*x186*x192))+((gconst17*gconst4*gconst7*x147))+((gconst9*x137*x147))+(((-1.0)*gconst9*x154*x170))+((x138*x176))+((pz*x151*x177))+((gconst2*x147*x154))+(((-1.0)*gconst7*x159*x163))+(((-1.0)*gconst10*x140*x141))+((gconst5*x147*x184))+(((-1.0)*gconst16*x137*x156))+((gconst1*x147*x160))+(((-1.0)*gconst11*x147*x171))+((gconst2*x143*x147))+(((-1.0)*gconst10*x140*x157))+((pz*x151*x167))+x228+x227+((gconst3*x141*x183))+((pz*x139*x178))+((gconst5*x147*x150))+(((-1.0)*gconst1*x149*x163))+(((-1.0)*gconst12*x144*x147))+((gconst19*x147*x169))+(((-1.0)*x229))+(((-1.0)*x220))+(((-1.0)*gconst7*x194))+((x143*x144))+((gconst4*x147*x177))+(((-1.0)*gconst2*x137*x152)));
op[6]=((((-1.0)*x178*x193))+((gconst11*gconst6*x159))+((gconst7*x151*x187))+(((-1.0)*gconst2*x154*x170))+((x137*x144))+(((-1.0)*gconst1*x152*x169))+(((-1.0)*gconst6*x144*x147))+((gconst5*x147*x186))+((gconst7*x147*x161))+(((-1.0)*gconst9*x137*x156))+(((-1.0)*x230))+x223+x225+(((-1.0)*gconst1*x163*x178))+(((-1.0)*x169*x192))+(((-1.0)*gconst2*x143*x156))+((gconst2*x147*x166))+(((-1.0)*gconst6*x153*x156))+((gconst2*x137*x147))+(((-1.0)*gconst7*x140*x164))+(((-1.0)*gconst3*x140*x157))+(((-1.0)*gconst3*x140*x141))+((gconst6*x147*x174))+((pz*x149*x151))+(((-1.0)*gconst13*x140*x159))+((gconst4*x147*x149)));
op[7]=(((x144*x176))+((pz*x151*x178))+((gconst1*x147*x169))+(((-1.0)*gconst7*x140*x159))+(((-1.0)*gconst1*x140*x149))+x220+(((-1.0)*gconst6*x156*x174))+((gconst5*x147*x169))+(((-1.0)*x227))+((gconst4*x147*x178))+(((-1.0)*gconst2*x137*x156)));
op[8]=((((-1.0)*gconst1*x140*x178))+(((-1.0)*gconst1*x156*x169))+(((-1.0)*x223)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x232=((1.48465160713536)*cj1);
IkReal x233=(cj0*px);
IkReal x234=(py*sj0);
cj3array[0]=((2.15409654510275)+(((1.48465160713536)*pz*sj1))+(((-0.0451850489128154)*x233))+(((-0.0451850489128154)*x234))+(((0.161375174688627)*(px*px)))+(((0.207851224998951)*cj1))+(((0.161375174688627)*(py*py)))+(((0.0530698399481017)*cj0*py))+(((-0.0530698399481017)*px*sj0))+(((-1.0)*x232*x234))+(((-1.0)*x232*x233))+(((0.161375174688627)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x235=py*py;
IkReal x236=pz*pz;
IkReal x237=px*px;
IkReal x238=(px*r01);
IkReal x239=((2.0)*py);
IkReal x240=((1.288)*cj1);
IkReal x241=(r00*sj0);
IkReal x242=((9.2)*cj1);
IkReal x243=(cj0*r01);
IkReal x244=(r01*sj0);
IkReal x245=(py*r00);
IkReal x246=(px*r00);
IkReal x247=(cj0*r00);
IkReal x248=((9.2)*sj1);
IkReal x249=(pz*r02);
IkReal x250=(px*sj0);
IkReal x251=((1.512756)*cj1);
IkReal x252=((1.0)*x237);
evalcond[0]=((-7.858261)+(((-1.0)*sj0*x238*x239))+(((-1.0)*x242*x245))+(((-0.0460404)*x244))+(((-0.0460404)*x247))+(((-0.28)*x245))+((x240*x241))+(((-2.0)*x249*x250))+(((0.32886)*py*r01))+(((-1.0)*x236*x243))+(((-6.19674)*(IKcos(j3))))+((x238*x242))+((x236*x241))+(((-1.0)*x244*x251))+((cj0*x239*x249))+((cj0*x239*x246))+((cj0*py*r02*x248))+(((-1.0)*pz*x243*x248))+(((-1.0)*x241*x252))+(((-1.0)*r02*x248*x250))+(((-1.0)*x247*x251))+((pz*x241*x248))+(((-21.1525627751)*x243))+(((1.512756)*r02*sj1))+(((-1.0)*x240*x243))+(((21.1525627751)*x241))+(((0.32886)*x249))+(((0.32886)*x246))+(((0.28)*x238))+((x235*x243))+((x235*x241))+(((-1.0)*x243*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x253=(cj0*px);
IkReal x254=((25190.0)*cj1);
IkReal x255=(py*sj0);
IkReal x256=((25190.0)*sj1);
IkReal x257=((1722.0)*cj3);
IkReal x258=((1722.0)*sj3);
IkReal x259=((12300.0)*cj1*cj3);
IkReal x260=((12300.0)*sj1*sj3);
IkReal x261=((12300.0)*cj3*sj1);
IkReal x262=((12300.0)*cj1*sj3);
CheckValue<IkReal> x263 = IKatan2WithCheck(IkReal((((x253*x261))+((x253*x262))+(((-56580.0)*sj3))+((pz*x254))+((pz*x259))+(((-3526.6)*sj1))+((x255*x261))+((x255*x262))+((x253*x256))+(((-1.0)*cj1*x258))+(((-1.0)*sj1*x257))+((x255*x256))+(((-1.0)*pz*x260)))),IkReal(((115874.0)+((x253*x260))+((cj1*x257))+(((-1.0)*x255*x259))+((pz*x256))+(((-1.0)*x254*x255))+((x255*x260))+(((-1.0)*sj1*x258))+((pz*x262))+((pz*x261))+(((-1.0)*x253*x254))+(((-1.0)*x253*x259))+(((56580.0)*cj3))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x263.valid){
continue;
}
CheckValue<IkReal> x264=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x264.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x263.value)+(((1.5707963267949)*(x264.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x265=IKsin(j2);
IkReal x266=IKcos(j2);
IkReal x267=(px*sj1);
IkReal x268=(cj1*r00);
IkReal x269=((0.14)*sj0);
IkReal x270=(cj1*r01);
IkReal x271=(cj0*pz);
IkReal x272=(py*sj1);
IkReal x273=((1.0)*r00);
IkReal x274=((0.16443)*sj0);
IkReal x275=((0.16443)*sj1);
IkReal x276=((0.14)*cj0);
IkReal x277=(r01*sj1);
IkReal x278=((1.0)*pz);
IkReal x279=(cj1*px);
IkReal x280=(cj1*py);
IkReal x281=(r02*sj0);
IkReal x282=((2.519)*x265);
IkReal x283=((2.519)*x266);
IkReal x284=((1.23)*x265);
IkReal x285=((1.23)*x266);
IkReal x286=((1.0)*cj0*r02);
IkReal x287=(cj3*x284);
IkReal x288=(sj3*x285);
IkReal x289=(sj3*x284);
IkReal x290=(cj3*x285);
IkReal x291=(x290+x283);
IkReal x292=(x288+x287+x282);
evalcond[0]=(((cj0*x267))+(((-0.14)*sj1))+((cj1*pz))+x292+((sj0*x272)));
evalcond[1]=((-4.6)+(((-1.0)*sj1*x278))+(((-1.0)*x291))+x289+((sj0*x280))+(((-0.14)*cj1))+((cj0*x279)));
evalcond[2]=((((-1.0)*x272*x273))+(((-1.0)*x274*x277))+(((-1.0)*cj0*r00*x275))+((x279*x281))+(((-1.0)*x292))+(((-1.0)*x280*x286))+(((-0.16443)*cj1*r02))+(((-1.0)*sj0*x268*x278))+((x270*x271))+((r00*sj1*x269))+((r01*x267))+(((-1.0)*x276*x277)));
evalcond[3]=(((x271*x277))+(((-1.0)*px*x270))+(((0.16443)*cj0*x268))+(((-1.0)*x291))+((x270*x274))+((x270*x276))+x289+(((-1.0)*x268*x269))+(((-1.0)*r02*x275))+(((-4.6)*r00*sj0))+(((4.6)*cj0*r01))+(((-1.0)*x272*x286))+((py*x268))+((x267*x281))+(((-1.0)*pz*sj0*sj1*x273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x293=((1.48465160713536)*cj1);
IkReal x294=(cj0*px);
IkReal x295=(py*sj0);
cj3array[0]=((2.15409654510275)+(((1.48465160713536)*pz*sj1))+(((-0.0451850489128154)*x295))+(((-0.0451850489128154)*x294))+(((0.161375174688627)*(px*px)))+(((0.207851224998951)*cj1))+(((-1.0)*x293*x294))+(((-1.0)*x293*x295))+(((0.161375174688627)*(py*py)))+(((0.0530698399481017)*cj0*py))+(((-0.0530698399481017)*px*sj0))+(((0.161375174688627)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x296=py*py;
IkReal x297=pz*pz;
IkReal x298=px*px;
IkReal x299=(px*r01);
IkReal x300=((2.0)*py);
IkReal x301=((1.288)*cj1);
IkReal x302=(r00*sj0);
IkReal x303=((9.2)*cj1);
IkReal x304=(cj0*r01);
IkReal x305=(r01*sj0);
IkReal x306=(py*r00);
IkReal x307=(px*r00);
IkReal x308=(cj0*r00);
IkReal x309=((9.2)*sj1);
IkReal x310=(pz*r02);
IkReal x311=(px*sj0);
IkReal x312=((1.512756)*cj1);
IkReal x313=((1.0)*x298);
evalcond[0]=((7.858261)+((x301*x302))+(((-1.0)*x301*x304))+(((-1.0)*pz*x304*x309))+(((6.19674)*(IKcos(j3))))+(((-0.0460404)*x305))+(((-0.0460404)*x308))+((cj0*x300*x307))+((cj0*x300*x310))+(((0.32886)*py*r01))+(((-1.0)*x303*x306))+(((-1.0)*sj0*x299*x300))+(((-1.0)*x302*x313))+(((-0.28)*x306))+((pz*x302*x309))+((x299*x303))+(((-1.0)*x308*x312))+(((-21.1525627751)*x304))+(((-1.0)*x305*x312))+((x297*x302))+(((0.32886)*x307))+(((-1.0)*x304*x313))+(((-2.0)*x310*x311))+(((-1.0)*r02*x309*x311))+((x296*x302))+((x296*x304))+(((1.512756)*r02*sj1))+((cj0*py*r02*x309))+(((0.32886)*x310))+(((21.1525627751)*x302))+(((-1.0)*x297*x304))+(((0.28)*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x314=(cj0*px);
IkReal x315=((25190.0)*cj1);
IkReal x316=(py*sj0);
IkReal x317=((25190.0)*sj1);
IkReal x318=((1722.0)*cj3);
IkReal x319=((1722.0)*sj3);
IkReal x320=((12300.0)*cj1*cj3);
IkReal x321=((12300.0)*sj1*sj3);
IkReal x322=((12300.0)*cj3*sj1);
IkReal x323=((12300.0)*cj1*sj3);
CheckValue<IkReal> x324 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x318))+(((-56580.0)*sj3))+((pz*x320))+(((-3526.6)*sj1))+((x314*x323))+((x314*x322))+(((-1.0)*cj1*x319))+((x316*x322))+((x316*x323))+((pz*x315))+(((-1.0)*pz*x321))+((x314*x317))+((x316*x317)))),IkReal(((115874.0)+(((-1.0)*x314*x320))+(((-1.0)*sj1*x319))+((pz*x323))+((pz*x322))+((cj1*x318))+((x314*x321))+(((-1.0)*x316*x320))+(((-1.0)*x315*x316))+((x316*x321))+((pz*x317))+(((-1.0)*x314*x315))+(((56580.0)*cj3))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x325.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x324.value)+(((1.5707963267949)*(x325.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x326=IKsin(j2);
IkReal x327=IKcos(j2);
IkReal x328=(px*sj1);
IkReal x329=(cj1*r00);
IkReal x330=((0.14)*sj0);
IkReal x331=(cj1*r01);
IkReal x332=(cj0*pz);
IkReal x333=(py*sj1);
IkReal x334=((1.0)*r00);
IkReal x335=((0.16443)*sj0);
IkReal x336=((0.16443)*sj1);
IkReal x337=((0.14)*cj0);
IkReal x338=(r01*sj1);
IkReal x339=((1.0)*pz);
IkReal x340=(cj1*px);
IkReal x341=(cj1*py);
IkReal x342=(r02*sj0);
IkReal x343=((2.519)*x326);
IkReal x344=((2.519)*x327);
IkReal x345=((1.23)*x326);
IkReal x346=((1.23)*x327);
IkReal x347=((1.0)*cj0*r02);
IkReal x348=(cj3*x345);
IkReal x349=(sj3*x346);
IkReal x350=(cj3*x346);
IkReal x351=(sj3*x345);
IkReal x352=(x350+x344);
IkReal x353=(x343+x348+x349);
evalcond[0]=((((-0.14)*sj1))+((cj1*pz))+x353+((cj0*x328))+((sj0*x333)));
evalcond[1]=((-4.6)+(((-1.0)*x352))+x351+((sj0*x341))+((cj0*x340))+(((-0.14)*cj1))+(((-1.0)*sj1*x339)));
evalcond[2]=((((-1.0)*x337*x338))+(((-1.0)*x333*x334))+((x331*x332))+(((-1.0)*cj0*r00*x336))+(((-1.0)*sj0*x329*x339))+((r01*x328))+(((-0.16443)*cj1*r02))+x353+(((-1.0)*x341*x347))+((x340*x342))+(((-1.0)*x335*x338))+((r00*sj1*x330)));
evalcond[3]=((((-1.0)*px*x331))+(((-1.0)*pz*sj0*sj1*x334))+((x331*x337))+((x331*x335))+(((-1.0)*x329*x330))+(((-1.0)*x351))+((x332*x338))+(((0.16443)*cj0*x329))+((py*x329))+x352+(((-1.0)*r02*x336))+(((-4.6)*r00*sj0))+(((4.6)*cj0*r01))+((x328*x342))+(((-1.0)*x333*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x354=px*px;
IkReal x355=py*py;
IkReal x356=pz*pz;
IkReal x357=((37241992150.0)*cj4);
IkReal x358=(cj0*px);
IkReal x359=((119595689493.125)*r02);
IkReal x360=(py*sj0);
IkReal x361=((1.48465160713536)*cj1);
IkReal x362=((550140171668.373)*sj1);
IkReal x363=(cj0*r00);
IkReal x364=(px*sj0);
IkReal x365=((12247401538.449)*cj4);
IkReal x366=(cj0*py);
IkReal x367=(pz*sj1);
IkReal x368=(r01*sj0);
IkReal x369=(cj1*cj4);
IkReal x370=((119595689493.125)*pz);
IkReal x371=((10427757802.0)*cj4);
CheckValue<IkReal> x372=IKPowWithIntegerCheck(cj4,-1);
if(!x372.valid){
continue;
}
if( IKabs(((5.16400559003605e-12)*(x372.value)*((((x358*x371))+(((-342626327780.0)*cj4*x367))+(((342626327780.0)*x358*x369))+((x364*x365))+(((342626327780.0)*x360*x369))+(((-1.0)*x356*x357))+(((-1.0)*x358*x359))+(((-1.0)*x359*x360))+(((550140171668.373)*cj1*r02))+(((-47967685889.2)*x369))+(((-1.0)*x354*x357))+((x368*x370))+(((-609806942430.442)*cj4))+(((16743396529.0374)*r02))+((x360*x371))+(((-1.0)*x365*x366))+((x362*x368))+((x362*x363))+(((-1.0)*x355*x357))+((x363*x370)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.15409654510275)+(((-1.0)*x360*x361))+(((1.48465160713536)*x367))+(((-1.0)*x358*x361))+(((0.207851224998951)*cj1))+(((-0.0451850489128154)*x358))+(((0.0530698399481017)*x366))+(((0.161375174688627)*x356))+(((0.161375174688627)*x355))+(((0.161375174688627)*x354))+(((-0.0530698399481017)*x364))+(((-0.0451850489128154)*x360)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.16400559003605e-12)*(x372.value)*((((x358*x371))+(((-342626327780.0)*cj4*x367))+(((342626327780.0)*x358*x369))+((x364*x365))+(((342626327780.0)*x360*x369))+(((-1.0)*x356*x357))+(((-1.0)*x358*x359))+(((-1.0)*x359*x360))+(((550140171668.373)*cj1*r02))+(((-47967685889.2)*x369))+(((-1.0)*x354*x357))+((x368*x370))+(((-609806942430.442)*cj4))+(((16743396529.0374)*r02))+((x360*x371))+(((-1.0)*x365*x366))+((x362*x368))+((x362*x363))+(((-1.0)*x355*x357))+((x363*x370))))))+IKsqr(((2.15409654510275)+(((-1.0)*x360*x361))+(((1.48465160713536)*x367))+(((-1.0)*x358*x361))+(((0.207851224998951)*cj1))+(((-0.0451850489128154)*x358))+(((0.0530698399481017)*x366))+(((0.161375174688627)*x356))+(((0.161375174688627)*x355))+(((0.161375174688627)*x354))+(((-0.0530698399481017)*x364))+(((-0.0451850489128154)*x360))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((5.16400559003605e-12)*(x372.value)*((((x358*x371))+(((-342626327780.0)*cj4*x367))+(((342626327780.0)*x358*x369))+((x364*x365))+(((342626327780.0)*x360*x369))+(((-1.0)*x356*x357))+(((-1.0)*x358*x359))+(((-1.0)*x359*x360))+(((550140171668.373)*cj1*r02))+(((-47967685889.2)*x369))+(((-1.0)*x354*x357))+((x368*x370))+(((-609806942430.442)*cj4))+(((16743396529.0374)*r02))+((x360*x371))+(((-1.0)*x365*x366))+((x362*x368))+((x362*x363))+(((-1.0)*x355*x357))+((x363*x370))))), ((2.15409654510275)+(((-1.0)*x360*x361))+(((1.48465160713536)*x367))+(((-1.0)*x358*x361))+(((0.207851224998951)*cj1))+(((-0.0451850489128154)*x358))+(((0.0530698399481017)*x366))+(((0.161375174688627)*x356))+(((0.161375174688627)*x355))+(((0.161375174688627)*x354))+(((-0.0530698399481017)*x364))+(((-0.0451850489128154)*x360))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x373=IKcos(j3);
IkReal x374=IKsin(j3);
IkReal x375=pz*pz;
IkReal x376=py*py;
IkReal x377=px*px;
IkReal x378=(cj0*r00);
IkReal x379=(px*r02);
IkReal x380=((1.0)*cj0);
IkReal x381=(cj1*sj0);
IkReal x382=(cj1*r01);
IkReal x383=((9.2)*px);
IkReal x384=((9.2)*sj1);
IkReal x385=(cj0*r01);
IkReal x386=(py*r00);
IkReal x387=((4.6)*r02);
IkReal x388=((0.28)*px);
IkReal x389=((1.0)*py);
IkReal x390=((4.6)*r01);
IkReal x391=((0.32886)*px);
IkReal x392=((1.92965936660165)*cj4);
IkReal x393=(py*sj0);
IkReal x394=(r00*sj0);
IkReal x395=((2.0)*py);
IkReal x396=(r01*sj0);
IkReal x397=(pz*r02);
IkReal x398=((1.61918983719838)*cj4);
IkReal x399=((0.32886)*py);
IkReal x400=((6.19674)*x373);
IkReal x401=((1.0)*x377);
evalcond[0]=((-13.3483762249)+(((-1.0)*x376))+(((-1.0)*x375))+(((-1.0)*cj0*x399))+((cj0*cj1*x383))+((sj0*x391))+(((9.2)*py*x381))+x400+(((-1.288)*cj1))+((cj0*x388))+(((0.28)*x393))+(((-1.0)*x401))+(((-1.0)*pz*x384)));
evalcond[1]=(((cj1*x387))+(((-1.0)*r02*sj0*x389))+(((-1.0)*x379*x380))+(((-0.942231449352932)*cj4))+((pz*x396))+(((-1.0)*x373*x392))+((sj0*sj1*x390))+((pz*x378))+(((0.14)*r02))+(((4.6)*sj1*x378))+(((-1.0)*x374*x398)));
evalcond[2]=((((0.16443)*x394))+(((-1.0)*x397))+(((-1.0)*px*r00))+((x381*x390))+(((0.14)*x378))+(((0.790632592200874)*cj4))+(((0.14)*x396))+(((-1.0)*x374*x392))+((x373*x398))+(((4.6)*cj1*x378))+(((-1.0)*r01*x389))+(((-1.0)*sj1*x387))+(((-0.16443)*x385)));
evalcond[3]=((((-9.2)*cj1*x386))+(((-1.0)*r01*x375*x380))+((x376*x385))+((cj0*x395*x397))+(((-1.0)*r01*x377*x380))+((cj0*py*r02*x384))+(((-0.28)*x386))+(((21.1525627751)*x394))+((r00*x391))+((x375*x394))+(((-1.512756)*cj1*x378))+(((-1.0)*x394*x401))+((r01*x399))+(((-1.512756)*r01*x381))+(((-1.288)*cj0*x382))+(((-2.0)*pz*sj0*x379))+((x376*x394))+(((-2.0)*px*r01*x393))+(((-1.0)*sj4*x400))+((x382*x383))+(((-0.0460404)*x378))+((px*x378*x395))+(((1.288)*r00*x381))+(((-0.0460404)*x396))+(((1.512756)*r02*sj1))+(((-1.0)*sj0*x379*x384))+(((-21.1525627751)*x385))+(((-1.0)*pz*x384*x385))+(((0.32886)*x397))+((pz*x384*x394))+((r01*x388))+(((-7.858261)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x402=(cj4*sj3);
IkReal x403=(cj3*cj4);
j2eval[0]=(cj4+(((1.71846295123172)*x402))+(((2.0479674796748)*x403)));
j2eval[1]=IKsign(((((192.965936660165)*x403))+(((94.2231449352931)*cj4))+(((161.918983719838)*x402))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x404=(cj4*sj3);
IkReal x405=(cj3*cj4);
j2eval[0]=((((2.44065244164813)*x404))+(((-2.0479674796748)*x405))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((192.965936660165)*x404))+(((-161.918983719838)*x405))+(((-79.0632592200874)*cj4))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x406=(cj0*px);
IkReal x407=((25190.0)*cj1);
IkReal x408=(py*sj0);
IkReal x409=((25190.0)*sj1);
IkReal x410=((1722.0)*cj3);
IkReal x411=((1722.0)*sj3);
IkReal x412=((12300.0)*cj1*cj3);
IkReal x413=((12300.0)*sj1*sj3);
IkReal x414=((12300.0)*cj3*sj1);
IkReal x415=((12300.0)*cj1*sj3);
CheckValue<IkReal> x416 = IKatan2WithCheck(IkReal((((pz*x407))+((pz*x412))+(((-1.0)*cj1*x411))+(((-56580.0)*sj3))+((x408*x415))+((x408*x414))+((x408*x409))+((x406*x415))+((x406*x414))+(((-3526.6)*sj1))+((x406*x409))+(((-1.0)*pz*x413))+(((-1.0)*sj1*x410)))),IkReal(((115874.0)+((pz*x409))+(((-1.0)*x406*x412))+(((-1.0)*x406*x407))+((pz*x415))+((pz*x414))+((x408*x413))+((x406*x413))+(((-1.0)*x407*x408))+(((-1.0)*sj1*x411))+(((56580.0)*cj3))+((cj1*x410))+(((-1.0)*x408*x412))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x416.valid){
continue;
}
CheckValue<IkReal> x417=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x417.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x416.value)+(((1.5707963267949)*(x417.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x418=IKsin(j2);
IkReal x419=IKcos(j2);
IkReal x420=(px*sj1);
IkReal x421=(cj1*r00);
IkReal x422=((0.14)*sj0);
IkReal x423=(cj1*r01);
IkReal x424=(cj0*pz);
IkReal x425=(py*sj1);
IkReal x426=((1.0)*r00);
IkReal x427=((0.16443)*sj0);
IkReal x428=((0.16443)*sj1);
IkReal x429=((0.14)*cj0);
IkReal x430=(r01*sj1);
IkReal x431=((1.0)*pz);
IkReal x432=(cj1*px);
IkReal x433=(cj1*py);
IkReal x434=(r02*sj0);
IkReal x435=((2.519)*x418);
IkReal x436=((2.519)*x419);
IkReal x437=((1.23)*x418);
IkReal x438=((1.23)*x419);
IkReal x439=((1.0)*cj0*r02);
IkReal x440=(cj3*x437);
IkReal x441=(sj3*x438);
IkReal x442=(sj3*x437);
IkReal x443=(cj3*x438);
IkReal x444=(x436+x443);
IkReal x445=(x435+x441+x440);
evalcond[0]=((((-0.14)*sj1))+((cj0*x420))+((cj1*pz))+x445+((sj0*x425)));
evalcond[1]=((-4.6)+((sj0*x433))+(((-1.0)*x444))+(((-1.0)*sj1*x431))+((cj0*x432))+x442+(((-0.14)*cj1)));
evalcond[2]=((((-1.0)*x445))+(((-1.0)*x427*x430))+(((-1.0)*x433*x439))+(((-1.0)*sj0*x421*x431))+(((-1.0)*x429*x430))+((r00*sj1*x422))+(((-0.16443)*cj1*r02))+((r01*x420))+(((-1.0)*x425*x426))+((x423*x424))+(((-1.0)*cj0*r00*x428))+((x432*x434)));
evalcond[3]=((((-1.0)*x444))+(((-1.0)*x421*x422))+((x424*x430))+(((-1.0)*pz*sj0*sj1*x426))+(((0.16443)*cj0*x421))+(((-1.0)*px*x423))+(((-1.0)*r02*x428))+((py*x421))+x442+((x423*x427))+((x423*x429))+(((-4.6)*r00*sj0))+(((-1.0)*x425*x439))+(((4.6)*cj0*r01))+((x420*x434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x446=(cj0*px);
IkReal x447=((25190.0)*cj1);
IkReal x448=(py*sj0);
IkReal x449=((25190.0)*sj1);
IkReal x450=((1722.0)*cj3);
IkReal x451=((1722.0)*sj3);
IkReal x452=((12300.0)*cj1*cj3);
IkReal x453=((12300.0)*sj1*sj3);
IkReal x454=((12300.0)*cj3*sj1);
IkReal x455=((12300.0)*cj1*sj3);
CheckValue<IkReal> x456 = IKatan2WithCheck(IkReal((((x446*x449))+(((-56580.0)*sj3))+((pz*x447))+(((-1.0)*cj1*x451))+(((-1.0)*pz*x453))+(((-1.0)*sj1*x450))+(((-3526.6)*sj1))+((x446*x455))+((x446*x454))+((x448*x455))+((x448*x454))+((pz*x452))+((x448*x449)))),IkReal(((115874.0)+(((-1.0)*x446*x452))+((cj1*x450))+((pz*x449))+(((-1.0)*sj1*x451))+((x446*x453))+(((-1.0)*x447*x448))+((x448*x453))+((pz*x455))+((pz*x454))+(((56580.0)*cj3))+(((-1.0)*x448*x452))+(((-1.0)*x446*x447))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x457.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x456.value)+(((1.5707963267949)*(x457.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x458=IKsin(j2);
IkReal x459=IKcos(j2);
IkReal x460=(px*sj1);
IkReal x461=(cj1*r00);
IkReal x462=((0.14)*sj0);
IkReal x463=(cj1*r01);
IkReal x464=(cj0*pz);
IkReal x465=(py*sj1);
IkReal x466=((1.0)*r00);
IkReal x467=((0.16443)*sj0);
IkReal x468=((0.16443)*sj1);
IkReal x469=((0.14)*cj0);
IkReal x470=(r01*sj1);
IkReal x471=((1.0)*pz);
IkReal x472=(cj1*px);
IkReal x473=(cj1*py);
IkReal x474=(r02*sj0);
IkReal x475=((2.519)*x458);
IkReal x476=((2.519)*x459);
IkReal x477=((1.23)*x458);
IkReal x478=((1.23)*x459);
IkReal x479=((1.0)*cj0*r02);
IkReal x480=(cj3*x477);
IkReal x481=(sj3*x478);
IkReal x482=(cj3*x478);
IkReal x483=(sj3*x477);
IkReal x484=(x482+x476);
IkReal x485=(x481+x480+x475);
evalcond[0]=((((-0.14)*sj1))+((cj1*pz))+((sj0*x465))+x485+((cj0*x460)));
evalcond[1]=((-4.6)+(((-1.0)*x484))+(((-1.0)*sj1*x471))+x483+((cj0*x472))+((sj0*x473))+(((-0.14)*cj1)));
evalcond[2]=((((-1.0)*x465*x466))+(((-1.0)*x467*x470))+((x472*x474))+((x463*x464))+(((-1.0)*x469*x470))+(((-1.0)*x473*x479))+(((-0.16443)*cj1*r02))+(((-1.0)*cj0*r00*x468))+x485+(((-1.0)*sj0*x461*x471))+((r01*x460))+((r00*sj1*x462)));
evalcond[3]=((((-1.0)*x483))+(((-1.0)*px*x463))+((x463*x467))+((x463*x469))+(((0.16443)*cj0*x461))+((x460*x474))+x484+((x464*x470))+(((-1.0)*r02*x468))+(((-4.6)*r00*sj0))+(((-1.0)*x461*x462))+(((4.6)*cj0*r01))+((py*x461))+(((-1.0)*x465*x479))+(((-1.0)*pz*sj0*sj1*x466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x486=(cj3*cj4);
IkReal x487=((76.6041828742221)*sj1);
IkReal x488=(py*sj0);
IkReal x489=((123.0)*sj3);
IkReal x490=(cj4*sj3);
IkReal x491=(cj0*px);
IkReal x492=(r02*sj1);
IkReal x493=((123.0)*cj3);
IkReal x494=((64.2790725366564)*sj1);
IkReal x495=((8.9990701551319)*sj1);
IkReal x496=((10.7245856023911)*sj1);
IkReal x497=(cj0*cj1*r00);
IkReal x498=((64.2790725366564)*cj1*pz);
IkReal x499=(cj1*r01*sj0);
IkReal x500=((76.6041828742221)*cj1*pz);
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal(((((-1.0)*x487*x488*x490))+((x486*x491*x494))+(((-1.0)*x489*x492))+(((-1.0)*x486*x495))+((x489*x497))+((x489*x499))+((x490*x496))+((x486*x488*x494))+(((-1.0)*x490*x500))+(((-1.0)*x487*x490*x491))+((x486*x498)))),IkReal(((((-1.0)*x486*x496))+(((251.9)*x492))+(((-1.0)*x493*x499))+(((-1.0)*x493*x497))+((x490*x498))+(((-1.0)*x490*x495))+((x486*x487*x491))+((x486*x487*x488))+((x488*x490*x494))+(((-251.9)*x497))+(((-251.9)*x499))+((x490*x491*x494))+((x486*x500))+((x492*x493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
CheckValue<IkReal> x502=IKPowWithIntegerCheck(IKsign(((((192.965936660165)*x490))+(((-161.918983719838)*x486))+(((-79.0632592200874)*cj4)))),-1);
if(!x502.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x501.value)+(((1.5707963267949)*(x502.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x503=IKsin(j2);
IkReal x504=IKcos(j2);
IkReal x505=px*px;
IkReal x506=pz*pz;
IkReal x507=py*py;
IkReal x508=(py*sj1);
IkReal x509=((0.32886)*r00);
IkReal x510=((0.28)*cj1);
IkReal x511=(py*sj0);
IkReal x512=((9.2)*r02);
IkReal x513=(r02*sj1);
IkReal x514=((1.23)*cj3);
IkReal x515=(r00*sj0);
IkReal x516=((2.0)*pz);
IkReal x517=((0.14)*cj1);
IkReal x518=((0.14)*sj1);
IkReal x519=((0.766041828742221)*cj4);
IkReal x520=(cj0*r01);
IkReal x521=(pz*sj1);
IkReal x522=(cj1*px);
IkReal x523=(cj1*r02);
IkReal x524=(px*sj1);
IkReal x525=((0.28)*r00);
IkReal x526=(cj0*r00);
IkReal x527=((9.2)*pz);
IkReal x528=((5.05121728830978)*cj4);
IkReal x529=(px*sj0);
IkReal x530=(cj1*sj0);
IkReal x531=((0.0460404)*cj1);
IkReal x532=(px*r00);
IkReal x533=((0.32886)*r02);
IkReal x534=((6.01975662717367)*cj4);
IkReal x535=((0.642790725366564)*cj4);
IkReal x536=(py*r01);
IkReal x537=(cj1*py);
IkReal x538=((0.32886)*r01);
IkReal x539=(cj1*pz);
IkReal x540=((1.0)*cj0);
IkReal x541=(r01*sj0);
IkReal x542=(r02*sj0);
IkReal x543=((2.0)*px);
IkReal x544=((0.0460404)*sj1);
IkReal x545=((0.28)*pz);
IkReal x546=(sj1*x541);
IkReal x547=(cj0*px*r02);
IkReal x548=(sj4*x503);
IkReal x549=((1.0)*x507);
IkReal x550=(sj3*x504);
IkReal x551=(cj3*x503);
IkReal x552=(cj4*x503);
IkReal x553=(cj1*x526);
IkReal x554=((1.0)*x505);
IkReal x555=(sj3*x503);
IkReal x556=(cj3*x504);
IkReal x557=(sj4*x504);
IkReal x558=(cj4*x504);
evalcond[0]=((((1.23)*x550))+((cj0*x524))+((sj0*x508))+((x503*x514))+(((2.519)*x503))+x539+(((-1.0)*x518)));
evalcond[1]=((-4.6)+(((1.23)*x555))+(((-2.519)*x504))+((cj0*x522))+(((-1.0)*x504*x514))+(((-1.0)*x521))+((cj1*x511))+(((-1.0)*x517)));
evalcond[2]=((((-1.0)*x519*x555))+((x519*x556))+((sj1*x526))+x546+x523+((x535*x551))+((x535*x550)));
evalcond[3]=(((x519*x551))+((x519*x550))+(((-1.0)*x513))+(((-1.0)*x535*x556))+x553+((x535*x555))+((r01*x530)));
evalcond[4]=(((x522*x542))+(((-2.519)*x548))+(((-1.0)*x514*x548))+(((-0.16443)*sj1*x526))+(((-1.0)*x515*x539))+(((-1.0)*r00*x508))+(((-0.16443)*x523))+(((-1.0)*x518*x520))+((x520*x539))+(((-0.16443)*x546))+((x515*x518))+(((-1.23)*sj4*x550))+(((-1.0)*py*x523*x540))+((r01*x524)));
evalcond[5]=((((4.6)*x520))+(((0.16443)*r01*x530))+(((0.16443)*x553))+(((1.23)*sj3*x548))+(((-1.0)*r02*x508*x540))+(((-4.6)*x515))+(((-1.0)*x515*x521))+((x517*x520))+(((-0.16443)*x513))+((x513*x529))+(((-1.0)*x515*x517))+((x520*x521))+(((-2.519)*x557))+(((-1.0)*x514*x557))+(((-1.0)*r01*x522))+((r00*x537)));
evalcond[6]=((((3.10626111149563)*cj4*x550))+(((-1.0)*cj1*x516*x536))+((x505*x546))+(((-0.32886)*x520*x539))+((pz*x510*x526))+((sj1*x506*x526))+(((-1.0)*x511*x512))+(((-1.0)*x524*x538))+(((-3.983206999508)*x552))+((pz*x510*x541))+(((0.28)*r01*x508))+(((21.1674372249)*x546))+(((4.74696204184007)*x558))+(((-1.0)*r00*x516*x522))+((sj1*x507*x526))+(((-1.0)*x528*x551))+((x526*x527))+((x508*x509))+(((-1.0)*x508*x520*x543))+(((-1.0)*sj1*x526*x554))+((x534*x556))+(((-1.0)*x508*x515*x543))+((x513*x545))+(((-1.0)*r02*x510*x511))+((x507*x523))+(((-1.0)*x508*x516*x542))+(((-1.0)*x515*x544))+(((0.32886)*cj0*py*x523))+(((1.288)*r02))+((x524*x525))+(((21.2066372249)*x523))+(((-1.0)*x506*x523))+((x506*x546))+(((3.70186726176546)*sj3*x552))+((x520*x544))+((pz*x509*x530))+(((21.1674372249)*sj1*x526))+(((-1.0)*cj0*px*x513*x516))+(((-1.0)*x510*x547))+(((-1.0)*sj0*x522*x533))+((x527*x541))+((x505*x523))+(((-1.0)*x546*x549))+(((-1.0)*cj0*px*x512)));
evalcond[7]=(((r01*x506*x530))+(((-3.70186726176546)*cj4*x550))+((r01*x505*x530))+(((-2.0)*r00*x511*x522))+(((-1.0)*cj0*x521*x525))+(((-1.512756)*x515))+(((1.512756)*x520))+(((-1.0)*cj0*r02*x516*x522))+(((4.74696204184007)*x552))+(((-0.28)*x521*x541))+(((21.1133627751)*x513))+(((9.2)*x532))+(((9.2)*x536))+((r00*x516*x524))+(((-1.0)*x553*x554))+((pz*x512))+(((-1.288)*x541))+((x509*x537))+(((0.28)*x508*x542))+(((0.32886)*x520*x521))+((x534*x551))+(((-1.288)*x526))+(((-1.0)*x515*x531))+(((3.10626111149563)*sj3*x552))+(((-1.0)*r01*x530*x549))+(((0.32886)*x513*x529))+(((-21.1525627751)*r01*x530))+((r01*x508*x516))+((pz*r02*x510))+(((-2.0)*py*x520*x522))+(((-1.0)*x513*x554))+((x506*x553))+(((-1.0)*x513*x549))+((x520*x531))+(((-1.0)*x511*x516*x523))+((x507*x553))+(((-1.0)*sj0*x509*x521))+(((-21.1525627751)*x553))+((x510*x536))+((x510*x532))+((x506*x513))+(((3.983206999508)*x558))+(((-1.0)*x522*x538))+(((0.28)*cj0*px*x513))+((x528*x556))+(((-1.0)*cj0*x508*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x559=(cj3*cj4);
IkReal x560=(sj0*sj1);
IkReal x561=((76.6041828742221)*py);
IkReal x562=((123.0)*cj3);
IkReal x563=(cj4*sj3);
IkReal x564=(cj0*sj1);
IkReal x565=((76.6041828742221)*px);
IkReal x566=((64.2790725366564)*py);
IkReal x567=(cj1*r02);
IkReal x568=((123.0)*sj3);
IkReal x569=((8.9990701551319)*sj1);
IkReal x570=((64.2790725366564)*px);
IkReal x571=((10.7245856023911)*sj1);
IkReal x572=((64.2790725366564)*cj1*pz);
IkReal x573=((76.6041828742221)*cj1*pz);
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*x559*x573))+((x559*x571))+(((-1.0)*x559*x564*x565))+((x563*x569))+((r01*x560*x568))+(((-1.0)*x559*x560*x561))+((x567*x568))+(((-1.0)*x563*x572))+((r00*x564*x568))+(((-1.0)*x560*x563*x566))+(((-1.0)*x563*x564*x570)))),IkReal((((x559*x572))+(((-251.9)*r00*x564))+(((-1.0)*r00*x562*x564))+((x563*x571))+((x559*x560*x566))+((x559*x564*x570))+(((-251.9)*r01*x560))+(((-1.0)*x562*x567))+(((-1.0)*r01*x560*x562))+(((-1.0)*x563*x573))+(((-1.0)*x559*x569))+(((-1.0)*x560*x561*x563))+(((-251.9)*x567))+(((-1.0)*x563*x564*x565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign(((((192.965936660165)*x559))+(((94.2231449352931)*cj4))+(((161.918983719838)*x563)))),-1);
if(!x575.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x576=IKsin(j2);
IkReal x577=IKcos(j2);
IkReal x578=px*px;
IkReal x579=pz*pz;
IkReal x580=py*py;
IkReal x581=(py*sj1);
IkReal x582=((0.32886)*r00);
IkReal x583=((0.28)*cj1);
IkReal x584=(py*sj0);
IkReal x585=((9.2)*r02);
IkReal x586=(r02*sj1);
IkReal x587=((1.23)*cj3);
IkReal x588=(r00*sj0);
IkReal x589=((2.0)*pz);
IkReal x590=((0.14)*cj1);
IkReal x591=((0.14)*sj1);
IkReal x592=((0.766041828742221)*cj4);
IkReal x593=(cj0*r01);
IkReal x594=(pz*sj1);
IkReal x595=(cj1*px);
IkReal x596=(cj1*r02);
IkReal x597=(px*sj1);
IkReal x598=((0.28)*r00);
IkReal x599=(cj0*r00);
IkReal x600=((9.2)*pz);
IkReal x601=((5.05121728830978)*cj4);
IkReal x602=(px*sj0);
IkReal x603=(cj1*sj0);
IkReal x604=((0.0460404)*cj1);
IkReal x605=(px*r00);
IkReal x606=((0.32886)*r02);
IkReal x607=((6.01975662717367)*cj4);
IkReal x608=((0.642790725366564)*cj4);
IkReal x609=(py*r01);
IkReal x610=(cj1*py);
IkReal x611=((0.32886)*r01);
IkReal x612=(cj1*pz);
IkReal x613=((1.0)*cj0);
IkReal x614=(r01*sj0);
IkReal x615=(r02*sj0);
IkReal x616=((2.0)*px);
IkReal x617=((0.0460404)*sj1);
IkReal x618=((0.28)*pz);
IkReal x619=(sj1*x614);
IkReal x620=(cj0*px*r02);
IkReal x621=(sj4*x576);
IkReal x622=((1.0)*x580);
IkReal x623=(sj3*x577);
IkReal x624=(cj3*x576);
IkReal x625=(cj4*x576);
IkReal x626=(cj1*x599);
IkReal x627=((1.0)*x578);
IkReal x628=(sj3*x576);
IkReal x629=(cj3*x577);
IkReal x630=(sj4*x577);
IkReal x631=(cj4*x577);
evalcond[0]=(((sj0*x581))+(((2.519)*x576))+(((1.23)*x623))+(((-1.0)*x591))+x612+((x576*x587))+((cj0*x597)));
evalcond[1]=((-4.6)+(((-1.0)*x594))+(((1.23)*x628))+(((-1.0)*x577*x587))+(((-1.0)*x590))+(((-2.519)*x577))+((cj0*x595))+((cj1*x584)));
evalcond[2]=(((x608*x623))+((x608*x624))+(((-1.0)*x592*x628))+x596+x619+((sj1*x599))+((x592*x629)));
evalcond[3]=((((-1.0)*x586))+((x608*x628))+x626+((x592*x624))+((x592*x623))+((r01*x603))+(((-1.0)*x608*x629)));
evalcond[4]=((((-1.0)*x587*x621))+((x593*x612))+((x595*x615))+((r01*x597))+(((-0.16443)*sj1*x599))+(((-1.23)*sj4*x623))+(((-1.0)*py*x596*x613))+(((-0.16443)*x596))+(((-0.16443)*x619))+(((-2.519)*x621))+(((-1.0)*r00*x581))+((x588*x591))+(((-1.0)*x591*x593))+(((-1.0)*x588*x612)));
evalcond[5]=(((r00*x610))+(((-1.0)*x587*x630))+(((-1.0)*x588*x590))+(((-1.0)*r02*x581*x613))+(((-0.16443)*x586))+(((-4.6)*x588))+(((1.23)*sj3*x621))+(((-1.0)*r01*x595))+(((-1.0)*x588*x594))+((x590*x593))+((x586*x602))+(((0.16443)*r01*x603))+(((0.16443)*x626))+(((-2.519)*x630))+((x593*x594))+(((4.6)*x593)));
evalcond[6]=((((21.1674372249)*x619))+((pz*x583*x614))+((pz*x583*x599))+(((4.74696204184007)*x631))+(((-1.0)*x579*x596))+(((-1.0)*x581*x588*x616))+((x581*x582))+((x600*x614))+(((-1.0)*sj1*x599*x627))+(((-1.0)*x583*x620))+(((0.28)*r01*x581))+((x593*x617))+(((-1.0)*x597*x611))+(((-1.0)*x584*x585))+((x578*x596))+(((-1.0)*sj0*x595*x606))+(((-1.0)*x601*x624))+(((21.1674372249)*sj1*x599))+((x586*x618))+(((-1.0)*x588*x617))+(((-1.0)*cj0*px*x586*x589))+(((-1.0)*r00*x589*x595))+(((-0.32886)*x593*x612))+(((0.32886)*cj0*py*x596))+(((-1.0)*cj0*px*x585))+(((-1.0)*cj1*x589*x609))+((x580*x596))+(((1.288)*r02))+(((-1.0)*r02*x583*x584))+((sj1*x579*x599))+(((-1.0)*x581*x593*x616))+((pz*x582*x603))+(((-3.983206999508)*x625))+(((-1.0)*x619*x622))+(((-1.0)*x581*x589*x615))+(((3.10626111149563)*cj4*x623))+((x599*x600))+((x597*x598))+((x579*x619))+(((21.2066372249)*x596))+((sj1*x580*x599))+((x607*x629))+((x578*x619))+(((3.70186726176546)*sj3*x625)));
evalcond[7]=((((-1.0)*cj0*r02*x589*x595))+(((0.28)*x581*x615))+(((-1.0)*cj0*x594*x598))+((pz*r02*x583))+((x582*x610))+(((-1.288)*x599))+(((-2.0)*r00*x584*x595))+(((4.74696204184007)*x625))+(((-1.0)*x586*x622))+(((-1.0)*x586*x627))+(((-1.0)*x595*x611))+(((-3.70186726176546)*cj4*x623))+((x579*x586))+(((21.1133627751)*x586))+(((-1.0)*sj0*x582*x594))+(((-2.0)*py*x593*x595))+(((-1.0)*cj0*x581*x606))+(((3.10626111149563)*sj3*x625))+((x593*x604))+(((-1.0)*r01*x603*x622))+(((0.32886)*x586*x602))+(((-1.0)*x584*x589*x596))+((x579*x626))+(((-0.28)*x594*x614))+((r01*x581*x589))+(((-1.0)*x588*x604))+(((1.512756)*x593))+(((0.28)*cj0*px*x586))+((r00*x589*x597))+(((-1.512756)*x588))+((x601*x629))+(((-21.1525627751)*r01*x603))+(((3.983206999508)*x631))+((r01*x579*x603))+(((-1.288)*x614))+(((-21.1525627751)*x626))+(((-1.0)*x626*x627))+((r01*x578*x603))+(((0.32886)*x593*x594))+((x583*x605))+((x583*x609))+((x607*x624))+((pz*x585))+((x580*x626))+(((9.2)*x609))+(((9.2)*x605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x632=(cj0*px);
IkReal x633=((25190.0)*cj1);
IkReal x634=(py*sj0);
IkReal x635=((25190.0)*sj1);
IkReal x636=((1722.0)*cj3);
IkReal x637=((1722.0)*sj3);
IkReal x638=((12300.0)*cj1*cj3);
IkReal x639=((12300.0)*sj1*sj3);
IkReal x640=((12300.0)*cj3*sj1);
IkReal x641=((12300.0)*cj1*sj3);
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x639))+(((-1.0)*cj1*x637))+((x634*x635))+((pz*x633))+((pz*x638))+(((-56580.0)*sj3))+((x634*x641))+((x634*x640))+(((-3526.6)*sj1))+((x632*x641))+((x632*x640))+((x632*x635))+(((-1.0)*sj1*x636)))),IkReal(((115874.0)+((x634*x639))+(((-1.0)*x633*x634))+((pz*x635))+(((-1.0)*x634*x638))+((pz*x640))+((pz*x641))+((x632*x639))+(((-1.0)*sj1*x637))+(((56580.0)*cj3))+((cj1*x636))+(((3526.6)*cj1))+(((-1.0)*x632*x638))+(((-1.0)*x632*x633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x643.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x642.value)+(((1.5707963267949)*(x643.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x644=IKsin(j2);
IkReal x645=IKcos(j2);
IkReal x646=px*px;
IkReal x647=pz*pz;
IkReal x648=py*py;
IkReal x649=(py*sj1);
IkReal x650=((0.32886)*r00);
IkReal x651=((0.28)*cj1);
IkReal x652=(py*sj0);
IkReal x653=((9.2)*r02);
IkReal x654=(r02*sj1);
IkReal x655=((1.23)*cj3);
IkReal x656=(r00*sj0);
IkReal x657=((2.0)*pz);
IkReal x658=((0.14)*cj1);
IkReal x659=((0.14)*sj1);
IkReal x660=((0.766041828742221)*cj4);
IkReal x661=(cj0*r01);
IkReal x662=(pz*sj1);
IkReal x663=(cj1*px);
IkReal x664=(cj1*r02);
IkReal x665=(px*sj1);
IkReal x666=((0.28)*r00);
IkReal x667=(cj0*r00);
IkReal x668=((9.2)*pz);
IkReal x669=((5.05121728830978)*cj4);
IkReal x670=(px*sj0);
IkReal x671=(cj1*sj0);
IkReal x672=((0.0460404)*cj1);
IkReal x673=(px*r00);
IkReal x674=((0.32886)*r02);
IkReal x675=((6.01975662717367)*cj4);
IkReal x676=((0.642790725366564)*cj4);
IkReal x677=(py*r01);
IkReal x678=(cj1*py);
IkReal x679=((0.32886)*r01);
IkReal x680=(cj1*pz);
IkReal x681=((1.0)*cj0);
IkReal x682=(r01*sj0);
IkReal x683=(r02*sj0);
IkReal x684=((2.0)*px);
IkReal x685=((0.0460404)*sj1);
IkReal x686=((0.28)*pz);
IkReal x687=(sj1*x682);
IkReal x688=(cj0*px*r02);
IkReal x689=(sj4*x644);
IkReal x690=((1.0)*x648);
IkReal x691=(sj3*x645);
IkReal x692=(cj3*x644);
IkReal x693=(cj4*x644);
IkReal x694=(cj1*x667);
IkReal x695=((1.0)*x646);
IkReal x696=(sj3*x644);
IkReal x697=(cj3*x645);
IkReal x698=(sj4*x645);
IkReal x699=(cj4*x645);
evalcond[0]=(((cj0*x665))+((sj0*x649))+((x644*x655))+(((-1.0)*x659))+(((1.23)*x691))+x680+(((2.519)*x644)));
evalcond[1]=((-4.6)+((cj0*x663))+((cj1*x652))+(((-2.519)*x645))+(((-1.0)*x658))+(((-1.0)*x662))+(((1.23)*x696))+(((-1.0)*x645*x655)));
evalcond[2]=(((sj1*x667))+(((-1.0)*x660*x696))+((x660*x697))+x664+x687+((x676*x692))+((x676*x691)));
evalcond[3]=(((r01*x671))+(((-1.0)*x654))+((x660*x692))+((x660*x691))+(((-1.0)*x676*x697))+x694+((x676*x696)));
evalcond[4]=((((-2.519)*x689))+(((-1.23)*sj4*x691))+((x661*x680))+(((-0.16443)*sj1*x667))+((x663*x683))+((r01*x665))+(((-0.16443)*x687))+(((-1.0)*x659*x661))+((x656*x659))+(((-1.0)*x656*x680))+(((-1.0)*r00*x649))+(((-0.16443)*x664))+(((-1.0)*py*x664*x681))+(((-1.0)*x655*x689)));
evalcond[5]=((((-0.16443)*x654))+(((0.16443)*r01*x671))+(((-4.6)*x656))+(((-1.0)*r02*x649*x681))+((r00*x678))+(((4.6)*x661))+(((-1.0)*x656*x658))+(((0.16443)*x694))+(((1.23)*sj3*x689))+(((-2.519)*x698))+((x661*x662))+((x658*x661))+(((-1.0)*r01*x663))+((x654*x670))+(((-1.0)*x656*x662))+(((-1.0)*x655*x698)));
evalcond[6]=((((-1.0)*x687*x690))+(((0.28)*r01*x649))+((x661*x685))+(((-3.983206999508)*x693))+((x654*x686))+(((-1.0)*sj0*x663*x674))+(((-1.0)*x649*x661*x684))+(((-1.0)*x647*x664))+((x648*x664))+((x667*x668))+(((-1.0)*r02*x651*x652))+(((-1.0)*x651*x688))+((x665*x666))+((pz*x651*x667))+(((-1.0)*cj0*px*x654*x657))+(((-1.0)*sj1*x667*x695))+(((0.32886)*cj0*py*x664))+((x649*x650))+(((21.2066372249)*x664))+((sj1*x647*x667))+((x646*x687))+((x675*x697))+(((-1.0)*cj0*px*x653))+((x647*x687))+(((-1.0)*x665*x679))+(((3.10626111149563)*cj4*x691))+(((-1.0)*x669*x692))+((pz*x651*x682))+(((-1.0)*cj1*x657*x677))+(((21.1674372249)*x687))+(((1.288)*r02))+(((-1.0)*x649*x657*x683))+(((-1.0)*r00*x657*x663))+(((-1.0)*x649*x656*x684))+((pz*x650*x671))+((x646*x664))+(((3.70186726176546)*sj3*x693))+(((4.74696204184007)*x699))+((sj1*x648*x667))+(((-1.0)*x656*x685))+((x668*x682))+(((21.1674372249)*sj1*x667))+(((-0.32886)*x661*x680))+(((-1.0)*x652*x653)));
evalcond[7]=(((x651*x677))+((x651*x673))+((pz*r02*x651))+(((0.28)*cj0*px*x654))+((x647*x654))+((x669*x697))+((x661*x672))+(((0.32886)*x654*x670))+(((3.983206999508)*x699))+((x648*x694))+(((-1.0)*r01*x671*x690))+(((-1.288)*x682))+(((-1.0)*x652*x657*x664))+(((0.32886)*x661*x662))+(((-2.0)*r00*x652*x663))+(((-1.0)*x663*x679))+((pz*x653))+(((0.28)*x649*x683))+((x675*x692))+(((-21.1525627751)*r01*x671))+(((-1.0)*cj0*x649*x674))+(((-1.0)*sj0*x650*x662))+(((3.10626111149563)*sj3*x693))+(((1.512756)*x661))+(((-21.1525627751)*x694))+(((-1.512756)*x656))+(((-1.0)*x654*x690))+(((-1.0)*x654*x695))+((x650*x678))+(((-0.28)*x662*x682))+((r01*x649*x657))+(((21.1133627751)*x654))+(((-1.0)*cj0*x662*x666))+(((-1.0)*x694*x695))+(((-3.70186726176546)*cj4*x691))+(((9.2)*x677))+(((9.2)*x673))+((r01*x647*x671))+(((4.74696204184007)*x693))+((r01*x646*x671))+(((-1.0)*x656*x672))+(((-1.288)*x667))+(((-1.0)*cj0*r02*x657*x663))+(((-2.0)*py*x661*x663))+((r00*x657*x665))+((x647*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x700=(cj0*r00);
IkReal x701=((6.07701674253682e+20)*pz);
IkReal x702=((3.33143348856475e+21)*sj1);
IkReal x703=(cj0*r01);
IkReal x704=(r01*sj0);
IkReal x705=((2.79542770156694e+21)*cj1);
IkReal x706=(r00*sj0);
IkReal x707=((7.2422467142712e+20)*r02);
IkReal x708=(py*sj0);
IkReal x709=((2.79542770156694e+21)*sj1);
IkReal x710=((6.07701674253682e+20)*px);
IkReal x711=((3.33143348856475e+21)*cj1);
IkReal x712=((7.2422467142712e+20)*pz);
IkReal x713=(py*r01);
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x707))+(((-1.0)*r02*x702))+(((-6.07701674253682e+20)*r02*x708))+((x701*x704))+((x700*x711))+((x700*x701))+((x700*x709))+(((-1.0)*cj0*r02*x710))+(((1.01391453999797e+20)*x704))+(((1.01391453999797e+20)*x700))+(((-7.2422467142712e+20)*px*r00))+(((-1.19084262722761e+20)*x703))+((x704*x709))+(((1.19084262722761e+20)*x706))+((x704*x711))+(((-7.2422467142712e+20)*x713))+((r02*x705))+(((8.50782343955155e+19)*r02)))),IkReal(((((9.9924386297533e+19)*x703))+(((-1.0)*x707*x708))+(((1.01391453999797e+20)*r02))+((x700*x712))+((x702*x704))+((x700*x702))+((r00*x710))+(((-1.0)*cj0*px*x707))+(((-9.9924386297533e+19)*x706))+(((-8.50782343955155e+19)*x704))+(((-8.50782343955155e+19)*x700))+(((-1.0)*x704*x705))+(((-1.16285601181593e+21)*cj4))+(((6.07701674253682e+20)*x713))+((x704*x712))+((r02*x709))+((r02*x701))+((r02*x711))+(((-1.0)*x700*x705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
CheckValue<IkReal> x715=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x715.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x714.value)+(((1.5707963267949)*(x715.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x716=IKcos(j3);
IkReal x717=IKsin(j3);
IkReal x718=pz*pz;
IkReal x719=py*py;
IkReal x720=px*px;
IkReal x721=(cj0*r00);
IkReal x722=(px*r02);
IkReal x723=((1.0)*cj0);
IkReal x724=(cj1*sj0);
IkReal x725=(cj1*r01);
IkReal x726=((9.2)*px);
IkReal x727=((9.2)*sj1);
IkReal x728=(cj0*r01);
IkReal x729=(py*r00);
IkReal x730=((4.6)*r02);
IkReal x731=((0.28)*px);
IkReal x732=((1.0)*py);
IkReal x733=((4.6)*r01);
IkReal x734=((0.32886)*px);
IkReal x735=((1.92965936660165)*cj4);
IkReal x736=(py*sj0);
IkReal x737=(r00*sj0);
IkReal x738=((2.0)*py);
IkReal x739=(r01*sj0);
IkReal x740=(pz*r02);
IkReal x741=((1.61918983719838)*cj4);
IkReal x742=((0.32886)*py);
IkReal x743=((6.19674)*x716);
IkReal x744=((1.0)*x720);
evalcond[0]=((-13.3483762249)+(((0.28)*x736))+((cj0*cj1*x726))+(((-1.0)*x719))+(((-1.0)*x718))+(((-1.0)*cj0*x742))+((cj0*x731))+(((-1.288)*cj1))+x743+(((9.2)*py*x724))+(((-1.0)*x744))+((sj0*x734))+(((-1.0)*pz*x727)));
evalcond[1]=((((-1.0)*x717*x741))+(((-0.942231449352932)*cj4))+(((-1.0)*x722*x723))+(((0.14)*r02))+(((-1.0)*x716*x735))+((pz*x739))+((pz*x721))+(((4.6)*sj1*x721))+((sj0*sj1*x733))+((cj1*x730))+(((-1.0)*r02*sj0*x732)));
evalcond[2]=((((-1.0)*r01*x732))+(((0.14)*x739))+(((0.14)*x721))+(((-1.0)*px*r00))+(((4.6)*cj1*x721))+(((-1.0)*x717*x735))+(((0.790632592200874)*cj4))+((x716*x741))+(((0.16443)*x737))+((x724*x733))+(((-1.0)*x740))+(((-1.0)*sj1*x730))+(((-0.16443)*x728)));
evalcond[3]=((((-1.0)*sj0*x722*x727))+(((-1.512756)*cj1*x721))+(((-0.28)*x729))+((cj0*x738*x740))+(((-1.0)*pz*x727*x728))+(((-2.0)*pz*sj0*x722))+(((-1.0)*x737*x744))+((cj0*py*r02*x727))+(((-1.0)*sj4*x743))+((pz*x727*x737))+(((-9.2)*cj1*x729))+(((-0.0460404)*x739))+(((-1.0)*r01*x720*x723))+(((-1.0)*r01*x718*x723))+(((-1.512756)*r01*x724))+(((-0.0460404)*x721))+((r00*x734))+((r01*x731))+((x718*x737))+((px*x721*x738))+(((0.32886)*x740))+(((-21.1525627751)*x728))+(((1.512756)*r02*sj1))+((x725*x726))+((r01*x742))+((x719*x728))+(((1.288)*r00*x724))+(((-1.288)*cj0*x725))+((x719*x737))+(((21.1525627751)*x737))+(((-2.0)*px*r01*x736))+(((-7.858261)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x745=(cj4*sj3);
IkReal x746=(cj3*cj4);
j2eval[0]=((((1.71846295123172)*x745))+cj4+(((2.0479674796748)*x746)));
j2eval[1]=IKsign(((((94.2231449352931)*cj4))+(((161.918983719838)*x745))+(((192.965936660165)*x746))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x747=(cj4*sj3);
IkReal x748=(cj3*cj4);
j2eval[0]=((((2.44065244164813)*x747))+(((-2.0479674796748)*x748))+(((-1.0)*cj4)));
j2eval[1]=IKsign(((((-161.918983719838)*x748))+(((-79.0632592200874)*cj4))+(((192.965936660165)*x747))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x749=(cj0*px);
IkReal x750=((25190.0)*cj1);
IkReal x751=(py*sj0);
IkReal x752=((25190.0)*sj1);
IkReal x753=((1722.0)*cj3);
IkReal x754=((1722.0)*sj3);
IkReal x755=((12300.0)*cj1*cj3);
IkReal x756=((12300.0)*sj1*sj3);
IkReal x757=((12300.0)*cj3*sj1);
IkReal x758=((12300.0)*cj1*sj3);
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x753))+((pz*x750))+((pz*x755))+((x751*x752))+((x751*x758))+((x751*x757))+(((-56580.0)*sj3))+(((-3526.6)*sj1))+(((-1.0)*cj1*x754))+(((-1.0)*pz*x756))+((x749*x758))+((x749*x752))+((x749*x757)))),IkReal(((115874.0)+(((-1.0)*sj1*x754))+((cj1*x753))+(((-1.0)*x750*x751))+((pz*x758))+((pz*x752))+((pz*x757))+((x751*x756))+(((-1.0)*x751*x755))+(((-1.0)*x749*x750))+(((-1.0)*x749*x755))+((x749*x756))+(((56580.0)*cj3))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
CheckValue<IkReal> x760=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x760.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x759.value)+(((1.5707963267949)*(x760.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x761=IKsin(j2);
IkReal x762=IKcos(j2);
IkReal x763=(px*sj1);
IkReal x764=(cj1*r00);
IkReal x765=((0.14)*sj0);
IkReal x766=(cj1*r01);
IkReal x767=(cj0*pz);
IkReal x768=(py*sj1);
IkReal x769=((1.0)*r00);
IkReal x770=((0.16443)*sj0);
IkReal x771=((0.16443)*sj1);
IkReal x772=((0.14)*cj0);
IkReal x773=(r01*sj1);
IkReal x774=((1.0)*pz);
IkReal x775=(cj1*px);
IkReal x776=(cj1*py);
IkReal x777=(r02*sj0);
IkReal x778=((2.519)*x761);
IkReal x779=((2.519)*x762);
IkReal x780=((1.23)*x761);
IkReal x781=((1.23)*x762);
IkReal x782=((1.0)*cj0*r02);
IkReal x783=(cj3*x780);
IkReal x784=(sj3*x781);
IkReal x785=(sj3*x780);
IkReal x786=(cj3*x781);
IkReal x787=(x779+x786);
IkReal x788=(x778+x783+x784);
evalcond[0]=((((-0.14)*sj1))+((sj0*x768))+((cj1*pz))+((cj0*x763))+x788);
evalcond[1]=((-4.6)+(((-1.0)*x787))+((sj0*x776))+x785+((cj0*x775))+(((-0.14)*cj1))+(((-1.0)*sj1*x774)));
evalcond[2]=((((-1.0)*x788))+(((-1.0)*sj0*x764*x774))+(((-0.16443)*cj1*r02))+(((-1.0)*x776*x782))+(((-1.0)*cj0*r00*x771))+(((-1.0)*x772*x773))+((r00*sj1*x765))+((x766*x767))+(((-1.0)*x768*x769))+(((-1.0)*x770*x773))+((x775*x777))+((r01*x763)));
evalcond[3]=((((-1.0)*px*x766))+(((-1.0)*x787))+((x767*x773))+(((-1.0)*x764*x765))+(((0.16443)*cj0*x764))+(((-1.0)*r02*x771))+((x766*x772))+((x766*x770))+(((-1.0)*x768*x782))+((py*x764))+(((-4.6)*r00*sj0))+((x763*x777))+x785+(((4.6)*cj0*r01))+(((-1.0)*pz*sj0*sj1*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2eval[0]=((-1.26812824162382)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-78582.61)+(((-61967.4)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x789=(cj0*px);
IkReal x790=((25190.0)*cj1);
IkReal x791=(py*sj0);
IkReal x792=((25190.0)*sj1);
IkReal x793=((1722.0)*cj3);
IkReal x794=((1722.0)*sj3);
IkReal x795=((12300.0)*cj1*cj3);
IkReal x796=((12300.0)*sj1*sj3);
IkReal x797=((12300.0)*cj3*sj1);
IkReal x798=((12300.0)*cj1*sj3);
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal(((((-56580.0)*sj3))+((pz*x795))+((pz*x790))+(((-3526.6)*sj1))+(((-1.0)*cj1*x794))+(((-1.0)*pz*x796))+((x791*x792))+((x791*x797))+((x791*x798))+((x789*x798))+((x789*x797))+((x789*x792))+(((-1.0)*sj1*x793)))),IkReal(((115874.0)+((cj1*x793))+((pz*x798))+((pz*x797))+((pz*x792))+(((-1.0)*x791*x795))+(((-1.0)*x790*x791))+(((-1.0)*x789*x795))+(((-1.0)*x789*x790))+(((56580.0)*cj3))+((x791*x796))+((x789*x796))+(((-1.0)*sj1*x794))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x800.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x799.value)+(((1.5707963267949)*(x800.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x801=IKsin(j2);
IkReal x802=IKcos(j2);
IkReal x803=(px*sj1);
IkReal x804=(cj1*r00);
IkReal x805=((0.14)*sj0);
IkReal x806=(cj1*r01);
IkReal x807=(cj0*pz);
IkReal x808=(py*sj1);
IkReal x809=((1.0)*r00);
IkReal x810=((0.16443)*sj0);
IkReal x811=((0.16443)*sj1);
IkReal x812=((0.14)*cj0);
IkReal x813=(r01*sj1);
IkReal x814=((1.0)*pz);
IkReal x815=(cj1*px);
IkReal x816=(cj1*py);
IkReal x817=(r02*sj0);
IkReal x818=((2.519)*x801);
IkReal x819=((2.519)*x802);
IkReal x820=((1.23)*x801);
IkReal x821=((1.23)*x802);
IkReal x822=((1.0)*cj0*r02);
IkReal x823=(cj3*x820);
IkReal x824=(sj3*x821);
IkReal x825=(cj3*x821);
IkReal x826=(sj3*x820);
IkReal x827=(x819+x825);
IkReal x828=(x818+x823+x824);
evalcond[0]=((((-0.14)*sj1))+((cj1*pz))+((sj0*x808))+((cj0*x803))+x828);
evalcond[1]=((-4.6)+((sj0*x816))+((cj0*x815))+(((-1.0)*x827))+x826+(((-1.0)*sj1*x814))+(((-0.14)*cj1)));
evalcond[2]=((((-1.0)*x812*x813))+(((-1.0)*x816*x822))+((x815*x817))+(((-1.0)*cj0*r00*x811))+((x806*x807))+(((-0.16443)*cj1*r02))+(((-1.0)*x810*x813))+(((-1.0)*sj0*x804*x814))+(((-1.0)*x808*x809))+((r00*sj1*x805))+((r01*x803))+x828);
evalcond[3]=((((-1.0)*x808*x822))+(((-1.0)*x804*x805))+(((0.16443)*cj0*x804))+(((-1.0)*x826))+((x807*x813))+(((-4.6)*r00*sj0))+((py*x804))+((x806*x810))+((x806*x812))+(((4.6)*cj0*r01))+x827+(((-1.0)*r02*x811))+(((-1.0)*pz*sj0*sj1*x809))+((x803*x817))+(((-1.0)*px*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x829=(cj3*cj4);
IkReal x830=((76.6041828742221)*sj1);
IkReal x831=(py*sj0);
IkReal x832=((123.0)*sj3);
IkReal x833=(cj4*sj3);
IkReal x834=(cj0*px);
IkReal x835=(r02*sj1);
IkReal x836=((123.0)*cj3);
IkReal x837=((64.2790725366564)*sj1);
IkReal x838=((8.9990701551319)*sj1);
IkReal x839=((10.7245856023911)*sj1);
IkReal x840=(cj0*cj1*r00);
IkReal x841=((64.2790725366564)*cj1*pz);
IkReal x842=(cj1*r01*sj0);
IkReal x843=((76.6041828742221)*cj1*pz);
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign(((((-161.918983719838)*x829))+(((-79.0632592200874)*cj4))+(((192.965936660165)*x833)))),-1);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal(((((-1.0)*x832*x835))+(((-1.0)*x830*x833*x834))+((x829*x831*x837))+(((-1.0)*x833*x843))+(((-1.0)*x830*x831*x833))+((x833*x839))+((x832*x842))+((x832*x840))+((x829*x834*x837))+((x829*x841))+(((-1.0)*x829*x838)))),IkReal((((x831*x833*x837))+((x833*x834*x837))+(((-1.0)*x836*x840))+(((-1.0)*x836*x842))+((x833*x841))+(((-1.0)*x833*x838))+((x835*x836))+((x829*x843))+(((-251.9)*x840))+(((-251.9)*x842))+((x829*x830*x831))+((x829*x830*x834))+(((251.9)*x835))+(((-1.0)*x829*x839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x844.value)))+(x845.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x846=IKsin(j2);
IkReal x847=IKcos(j2);
IkReal x848=px*px;
IkReal x849=pz*pz;
IkReal x850=py*py;
IkReal x851=(py*sj1);
IkReal x852=((0.32886)*r00);
IkReal x853=((0.28)*cj1);
IkReal x854=(py*sj0);
IkReal x855=((9.2)*r02);
IkReal x856=(r02*sj1);
IkReal x857=((1.23)*cj3);
IkReal x858=(r00*sj0);
IkReal x859=((2.0)*pz);
IkReal x860=((0.14)*cj1);
IkReal x861=((0.14)*sj1);
IkReal x862=((0.766041828742221)*cj4);
IkReal x863=(cj0*r01);
IkReal x864=(pz*sj1);
IkReal x865=(cj1*px);
IkReal x866=(cj1*r02);
IkReal x867=(px*sj1);
IkReal x868=((0.28)*r00);
IkReal x869=(cj0*r00);
IkReal x870=((9.2)*pz);
IkReal x871=((5.05121728830978)*cj4);
IkReal x872=(px*sj0);
IkReal x873=(cj1*sj0);
IkReal x874=((0.0460404)*cj1);
IkReal x875=(px*r00);
IkReal x876=((0.32886)*r02);
IkReal x877=((6.01975662717367)*cj4);
IkReal x878=((0.642790725366564)*cj4);
IkReal x879=(py*r01);
IkReal x880=(cj1*py);
IkReal x881=((0.32886)*r01);
IkReal x882=(cj1*pz);
IkReal x883=((1.0)*cj0);
IkReal x884=(r01*sj0);
IkReal x885=(r02*sj0);
IkReal x886=((2.0)*px);
IkReal x887=((0.0460404)*sj1);
IkReal x888=((0.28)*pz);
IkReal x889=(sj1*x884);
IkReal x890=(cj0*px*r02);
IkReal x891=(sj4*x846);
IkReal x892=((1.0)*x850);
IkReal x893=(sj3*x847);
IkReal x894=(cj3*x846);
IkReal x895=(cj4*x846);
IkReal x896=(cj1*x869);
IkReal x897=((1.0)*x848);
IkReal x898=(sj3*x846);
IkReal x899=(cj3*x847);
IkReal x900=(sj4*x847);
IkReal x901=(cj4*x847);
evalcond[0]=((((-1.0)*x861))+((cj0*x867))+((sj0*x851))+(((2.519)*x846))+(((1.23)*x893))+((x846*x857))+x882);
evalcond[1]=((-4.6)+(((-1.0)*x860))+((cj0*x865))+(((-1.0)*x864))+(((-1.0)*x847*x857))+((cj1*x854))+(((1.23)*x898))+(((-2.519)*x847)));
evalcond[2]=(((sj1*x869))+((x878*x893))+((x878*x894))+x866+x889+((x862*x899))+(((-1.0)*x862*x898)));
evalcond[3]=(((r01*x873))+(((-1.0)*x856))+((x878*x898))+x896+((x862*x894))+((x862*x893))+(((-1.0)*x878*x899)));
evalcond[4]=((((-1.0)*r00*x851))+((x863*x882))+(((-1.0)*py*x866*x883))+((r01*x867))+(((-1.23)*sj4*x893))+(((-1.0)*x861*x863))+((x865*x885))+((x858*x861))+(((-0.16443)*sj1*x869))+(((-1.0)*x857*x891))+(((-0.16443)*x889))+(((-0.16443)*x866))+(((-2.519)*x891))+(((-1.0)*x858*x882)));
evalcond[5]=((((-1.0)*r01*x865))+(((0.16443)*r01*x873))+(((0.16443)*x896))+((r00*x880))+((x863*x864))+(((4.6)*x863))+(((1.23)*sj3*x891))+((x856*x872))+(((-1.0)*x858*x864))+(((-1.0)*r02*x851*x883))+(((-2.519)*x900))+(((-1.0)*x858*x860))+((x860*x863))+(((-1.0)*x857*x900))+(((-0.16443)*x856))+(((-4.6)*x858)));
evalcond[6]=(((x850*x866))+(((-1.0)*x851*x858*x886))+((sj1*x850*x869))+((x863*x887))+((pz*x852*x873))+((x867*x868))+(((-1.0)*cj1*x859*x879))+(((0.32886)*cj0*py*x866))+((x848*x866))+(((-1.0)*sj0*x865*x876))+(((-1.0)*r02*x853*x854))+(((-1.0)*cj0*px*x855))+(((-3.983206999508)*x895))+((x848*x889))+(((-1.0)*x851*x859*x885))+(((-1.0)*x867*x881))+(((-1.0)*r00*x859*x865))+(((-1.0)*cj0*px*x856*x859))+((x877*x899))+(((4.74696204184007)*x901))+(((21.2066372249)*x866))+(((-1.0)*x849*x866))+(((-1.0)*x889*x892))+(((21.1674372249)*x889))+(((-1.0)*sj1*x869*x897))+((x851*x852))+(((1.288)*r02))+((pz*x853*x869))+((x870*x884))+((x869*x870))+((x849*x889))+(((0.28)*r01*x851))+(((3.70186726176546)*sj3*x895))+(((-1.0)*x851*x863*x886))+(((-1.0)*x871*x894))+(((3.10626111149563)*cj4*x893))+((pz*x853*x884))+((sj1*x849*x869))+(((-1.0)*x854*x855))+((x856*x888))+(((-1.0)*x858*x887))+(((-1.0)*x853*x890))+(((21.1674372249)*sj1*x869))+(((-0.32886)*x863*x882)));
evalcond[7]=((((-1.0)*x856*x897))+(((-1.0)*x856*x892))+((r01*x849*x873))+(((-1.288)*x869))+(((0.32886)*x863*x864))+(((3.983206999508)*x901))+(((-3.70186726176546)*cj4*x893))+(((9.2)*x875))+(((9.2)*x879))+(((-1.0)*x896*x897))+(((0.32886)*x856*x872))+((x863*x874))+((r01*x851*x859))+((x850*x896))+(((-21.1525627751)*x896))+((x877*x894))+(((4.74696204184007)*x895))+((x852*x880))+((r00*x859*x867))+(((-1.0)*r01*x873*x892))+((r01*x848*x873))+(((-1.0)*cj0*x851*x876))+(((-0.28)*x864*x884))+(((-1.0)*cj0*x864*x868))+(((-1.512756)*x858))+(((0.28)*cj0*px*x856))+(((1.512756)*x863))+((x849*x896))+(((-1.0)*sj0*x852*x864))+((x871*x899))+((x853*x875))+((x853*x879))+(((-1.0)*x858*x874))+(((-1.0)*x854*x859*x866))+(((-1.0)*cj0*r02*x859*x865))+(((21.1133627751)*x856))+((x849*x856))+(((-2.0)*r00*x854*x865))+(((-2.0)*py*x863*x865))+(((-1.288)*x884))+((pz*r02*x853))+(((-1.0)*x865*x881))+(((0.28)*x851*x885))+(((-21.1525627751)*r01*x873))+((pz*x855))+(((3.10626111149563)*sj3*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x902=(cj3*cj4);
IkReal x903=(sj0*sj1);
IkReal x904=((76.6041828742221)*py);
IkReal x905=((123.0)*cj3);
IkReal x906=(cj4*sj3);
IkReal x907=(cj0*sj1);
IkReal x908=((76.6041828742221)*px);
IkReal x909=((64.2790725366564)*py);
IkReal x910=(cj1*r02);
IkReal x911=((123.0)*sj3);
IkReal x912=((8.9990701551319)*sj1);
IkReal x913=((64.2790725366564)*px);
IkReal x914=((10.7245856023911)*sj1);
IkReal x915=((64.2790725366564)*cj1*pz);
IkReal x916=((76.6041828742221)*cj1*pz);
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal(((((-1.0)*x902*x903*x904))+(((-1.0)*x906*x915))+(((-1.0)*x906*x907*x913))+(((-1.0)*x902*x907*x908))+((x902*x914))+((x910*x911))+((r00*x907*x911))+(((-1.0)*x902*x916))+(((-1.0)*x903*x906*x909))+((x906*x912))+((r01*x903*x911)))),IkReal(((((-251.9)*x910))+(((-1.0)*x906*x916))+((x902*x915))+(((-1.0)*x906*x907*x908))+(((-1.0)*x902*x912))+((x902*x903*x909))+((x906*x914))+(((-1.0)*r00*x905*x907))+(((-1.0)*x905*x910))+((x902*x907*x913))+(((-251.9)*r00*x907))+(((-251.9)*r01*x903))+(((-1.0)*r01*x903*x905))+(((-1.0)*x903*x904*x906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918=IKPowWithIntegerCheck(IKsign(((((94.2231449352931)*cj4))+(((161.918983719838)*x906))+(((192.965936660165)*x902)))),-1);
if(!x918.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x917.value)+(((1.5707963267949)*(x918.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x919=IKsin(j2);
IkReal x920=IKcos(j2);
IkReal x921=px*px;
IkReal x922=pz*pz;
IkReal x923=py*py;
IkReal x924=(py*sj1);
IkReal x925=((0.32886)*r00);
IkReal x926=((0.28)*cj1);
IkReal x927=(py*sj0);
IkReal x928=((9.2)*r02);
IkReal x929=(r02*sj1);
IkReal x930=((1.23)*cj3);
IkReal x931=(r00*sj0);
IkReal x932=((2.0)*pz);
IkReal x933=((0.14)*cj1);
IkReal x934=((0.14)*sj1);
IkReal x935=((0.766041828742221)*cj4);
IkReal x936=(cj0*r01);
IkReal x937=(pz*sj1);
IkReal x938=(cj1*px);
IkReal x939=(cj1*r02);
IkReal x940=(px*sj1);
IkReal x941=((0.28)*r00);
IkReal x942=(cj0*r00);
IkReal x943=((9.2)*pz);
IkReal x944=((5.05121728830978)*cj4);
IkReal x945=(px*sj0);
IkReal x946=(cj1*sj0);
IkReal x947=((0.0460404)*cj1);
IkReal x948=(px*r00);
IkReal x949=((0.32886)*r02);
IkReal x950=((6.01975662717367)*cj4);
IkReal x951=((0.642790725366564)*cj4);
IkReal x952=(py*r01);
IkReal x953=(cj1*py);
IkReal x954=((0.32886)*r01);
IkReal x955=(cj1*pz);
IkReal x956=((1.0)*cj0);
IkReal x957=(r01*sj0);
IkReal x958=(r02*sj0);
IkReal x959=((2.0)*px);
IkReal x960=((0.0460404)*sj1);
IkReal x961=((0.28)*pz);
IkReal x962=(sj1*x957);
IkReal x963=(cj0*px*r02);
IkReal x964=(sj4*x919);
IkReal x965=((1.0)*x923);
IkReal x966=(sj3*x920);
IkReal x967=(cj3*x919);
IkReal x968=(cj4*x919);
IkReal x969=(cj1*x942);
IkReal x970=((1.0)*x921);
IkReal x971=(sj3*x919);
IkReal x972=(cj3*x920);
IkReal x973=(sj4*x920);
IkReal x974=(cj4*x920);
evalcond[0]=(((cj0*x940))+(((1.23)*x966))+((x919*x930))+((sj0*x924))+(((2.519)*x919))+x955+(((-1.0)*x934)));
evalcond[1]=((-4.6)+((cj0*x938))+(((-1.0)*x920*x930))+(((-1.0)*x937))+((cj1*x927))+(((-2.519)*x920))+(((1.23)*x971))+(((-1.0)*x933)));
evalcond[2]=(((x951*x967))+((x951*x966))+((sj1*x942))+(((-1.0)*x935*x971))+((x935*x972))+x939+x962);
evalcond[3]=((((-1.0)*x929))+((r01*x946))+((x935*x967))+((x935*x966))+(((-1.0)*x951*x972))+x969+((x951*x971)));
evalcond[4]=((((-0.16443)*x939))+(((-0.16443)*x962))+(((-0.16443)*sj1*x942))+(((-1.0)*x934*x936))+((r01*x940))+((x931*x934))+(((-1.0)*x930*x964))+(((-1.0)*py*x939*x956))+(((-1.23)*sj4*x966))+(((-1.0)*r00*x924))+((x938*x958))+((x936*x955))+(((-1.0)*x931*x955))+(((-2.519)*x964)));
evalcond[5]=(((x936*x937))+(((-0.16443)*x929))+(((-1.0)*x931*x933))+(((0.16443)*x969))+(((-1.0)*x931*x937))+(((0.16443)*r01*x946))+((r00*x953))+(((-4.6)*x931))+(((-1.0)*r01*x938))+(((-2.519)*x973))+((x929*x945))+(((-1.0)*x930*x973))+(((-1.0)*r02*x924*x956))+(((4.6)*x936))+((x933*x936))+(((1.23)*sj3*x964)));
evalcond[6]=(((x921*x962))+(((3.70186726176546)*sj3*x968))+(((21.1674372249)*x962))+((x950*x972))+((pz*x925*x946))+((sj1*x923*x942))+((pz*x926*x957))+(((-1.0)*sj0*x938*x949))+(((-1.0)*sj1*x942*x970))+(((-1.0)*x962*x965))+(((-1.0)*r02*x926*x927))+(((-1.0)*cj0*px*x928))+((sj1*x922*x942))+((x924*x925))+(((0.32886)*cj0*py*x939))+(((-0.32886)*x936*x955))+(((0.28)*r01*x924))+(((-1.0)*x940*x954))+(((-1.0)*x944*x967))+((x943*x957))+((x929*x961))+(((21.2066372249)*x939))+(((-1.0)*x927*x928))+((x921*x939))+(((-1.0)*x924*x936*x959))+((pz*x926*x942))+((x942*x943))+(((-1.0)*x926*x963))+(((-1.0)*x922*x939))+(((1.288)*r02))+((x923*x939))+(((3.10626111149563)*cj4*x966))+((x922*x962))+(((-1.0)*x931*x960))+(((-1.0)*cj0*px*x929*x932))+(((-1.0)*cj1*x932*x952))+(((-1.0)*x924*x932*x958))+(((21.1674372249)*sj1*x942))+(((-1.0)*r00*x932*x938))+((x940*x941))+(((-1.0)*x924*x931*x959))+(((-3.983206999508)*x968))+(((4.74696204184007)*x974))+((x936*x960)));
evalcond[7]=((((-1.0)*cj0*r02*x932*x938))+(((1.512756)*x936))+((r00*x932*x940))+(((-0.28)*x937*x957))+(((0.32886)*x929*x945))+(((-1.0)*sj0*x925*x937))+((r01*x922*x946))+(((-1.0)*x927*x932*x939))+(((-1.0)*x969*x970))+((r01*x921*x946))+(((-1.0)*cj0*x937*x941))+(((-1.0)*x938*x954))+((x936*x947))+(((-21.1525627751)*r01*x946))+(((-1.0)*x929*x970))+((x926*x952))+(((-21.1525627751)*x969))+((x944*x972))+(((-1.0)*r01*x946*x965))+(((-1.0)*x929*x965))+(((-3.70186726176546)*cj4*x966))+(((21.1133627751)*x929))+(((-2.0)*py*x936*x938))+((r01*x924*x932))+((pz*x928))+(((0.32886)*x936*x937))+(((-1.288)*x942))+(((0.28)*x924*x958))+(((9.2)*x948))+((x922*x969))+((x926*x948))+(((-1.0)*cj0*x924*x949))+(((0.28)*cj0*px*x929))+(((-2.0)*r00*x927*x938))+((x922*x929))+(((3.10626111149563)*sj3*x968))+((x923*x969))+(((-1.288)*x957))+(((-1.0)*x931*x947))+((x925*x953))+(((3.983206999508)*x974))+(((-1.512756)*x931))+((pz*r02*x926))+(((4.74696204184007)*x968))+(((9.2)*x952))+((x950*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x975=(cj0*px);
IkReal x976=((25190.0)*cj1);
IkReal x977=(py*sj0);
IkReal x978=((25190.0)*sj1);
IkReal x979=((1722.0)*cj3);
IkReal x980=((1722.0)*sj3);
IkReal x981=((12300.0)*cj1*cj3);
IkReal x982=((12300.0)*sj1*sj3);
IkReal x983=((12300.0)*cj3*sj1);
IkReal x984=((12300.0)*cj1*sj3);
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x980))+((x975*x978))+((x975*x983))+((x975*x984))+(((-1.0)*pz*x982))+((x977*x978))+(((-56580.0)*sj3))+((x977*x984))+((x977*x983))+(((-3526.6)*sj1))+((pz*x981))+((pz*x976))+(((-1.0)*sj1*x979)))),IkReal(((115874.0)+((x975*x982))+((cj1*x979))+((x977*x982))+((pz*x983))+((pz*x984))+((pz*x978))+(((-1.0)*x976*x977))+(((-1.0)*x977*x981))+(((-1.0)*x975*x981))+(((-1.0)*sj1*x980))+(((56580.0)*cj3))+(((-1.0)*x975*x976))+(((3526.6)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign(((-78582.61)+(((-61967.4)*cj3)))),-1);
if(!x986.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x985.value)+(((1.5707963267949)*(x986.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x987=IKsin(j2);
IkReal x988=IKcos(j2);
IkReal x989=px*px;
IkReal x990=pz*pz;
IkReal x991=py*py;
IkReal x992=(py*sj1);
IkReal x993=((0.32886)*r00);
IkReal x994=((0.28)*cj1);
IkReal x995=(py*sj0);
IkReal x996=((9.2)*r02);
IkReal x997=(r02*sj1);
IkReal x998=((1.23)*cj3);
IkReal x999=(r00*sj0);
IkReal x1000=((2.0)*pz);
IkReal x1001=((0.14)*cj1);
IkReal x1002=((0.14)*sj1);
IkReal x1003=((0.766041828742221)*cj4);
IkReal x1004=(cj0*r01);
IkReal x1005=(pz*sj1);
IkReal x1006=(cj1*px);
IkReal x1007=(cj1*r02);
IkReal x1008=(px*sj1);
IkReal x1009=((0.28)*r00);
IkReal x1010=(cj0*r00);
IkReal x1011=((9.2)*pz);
IkReal x1012=((5.05121728830978)*cj4);
IkReal x1013=(px*sj0);
IkReal x1014=(cj1*sj0);
IkReal x1015=((0.0460404)*cj1);
IkReal x1016=(px*r00);
IkReal x1017=((0.32886)*r02);
IkReal x1018=((6.01975662717367)*cj4);
IkReal x1019=((0.642790725366564)*cj4);
IkReal x1020=(py*r01);
IkReal x1021=(cj1*py);
IkReal x1022=((0.32886)*r01);
IkReal x1023=(cj1*pz);
IkReal x1024=((1.0)*cj0);
IkReal x1025=(r01*sj0);
IkReal x1026=(r02*sj0);
IkReal x1027=((2.0)*px);
IkReal x1028=((0.0460404)*sj1);
IkReal x1029=((0.28)*pz);
IkReal x1030=(sj1*x1025);
IkReal x1031=(cj0*px*r02);
IkReal x1032=(sj4*x987);
IkReal x1033=((1.0)*x991);
IkReal x1034=(sj3*x988);
IkReal x1035=(cj3*x987);
IkReal x1036=(cj4*x987);
IkReal x1037=(cj1*x1010);
IkReal x1038=((1.0)*x989);
IkReal x1039=(sj3*x987);
IkReal x1040=(cj3*x988);
IkReal x1041=(sj4*x988);
IkReal x1042=(cj4*x988);
evalcond[0]=(x1023+(((-1.0)*x1002))+(((1.23)*x1034))+((cj0*x1008))+((x987*x998))+((sj0*x992))+(((2.519)*x987)));
evalcond[1]=((-4.6)+(((-1.0)*x1005))+((cj1*x995))+(((-1.0)*x1001))+(((1.23)*x1039))+((cj0*x1006))+(((-2.519)*x988))+(((-1.0)*x988*x998)));
evalcond[2]=(x1007+x1030+((sj1*x1010))+((x1019*x1034))+((x1019*x1035))+(((-1.0)*x1003*x1039))+((x1003*x1040)));
evalcond[3]=(((x1003*x1034))+((x1003*x1035))+(((-1.0)*x997))+x1037+(((-1.0)*x1019*x1040))+((x1019*x1039))+((r01*x1014)));
evalcond[4]=(((r01*x1008))+(((-0.16443)*x1030))+(((-0.16443)*x1007))+(((-1.0)*x1023*x999))+(((-0.16443)*sj1*x1010))+(((-1.0)*r00*x992))+(((-2.519)*x1032))+((x1002*x999))+(((-1.0)*x1002*x1004))+((x1006*x1026))+(((-1.0)*py*x1007*x1024))+(((-1.23)*sj4*x1034))+((x1004*x1023))+(((-1.0)*x1032*x998)));
evalcond[5]=((((4.6)*x1004))+(((-1.0)*r01*x1006))+(((0.16443)*r01*x1014))+(((-4.6)*x999))+(((-1.0)*r02*x1024*x992))+(((-1.0)*x1005*x999))+(((0.16443)*x1037))+((x1004*x1005))+(((-1.0)*x1001*x999))+(((-1.0)*x1041*x998))+(((-0.16443)*x997))+((x1013*x997))+(((-2.519)*x1041))+(((1.23)*sj3*x1032))+((x1001*x1004))+((r00*x1021)));
evalcond[6]=(((x1011*x1025))+(((-3.983206999508)*x1036))+(((-0.32886)*x1004*x1023))+(((-1.0)*x1031*x994))+((x1008*x1009))+((pz*x1014*x993))+(((3.70186726176546)*sj3*x1036))+(((21.1674372249)*x1030))+(((21.1674372249)*sj1*x1010))+((x1029*x997))+((x1018*x1040))+(((-1.0)*x1004*x1027*x992))+(((21.2066372249)*x1007))+((x992*x993))+((x1030*x990))+(((-1.0)*r02*x994*x995))+((sj1*x1010*x990))+((sj1*x1010*x991))+((pz*x1025*x994))+(((-1.0)*x995*x996))+(((-1.0)*x1007*x990))+(((-1.0)*x1000*x1026*x992))+((x1007*x989))+(((3.10626111149563)*cj4*x1034))+(((-1.0)*x1027*x992*x999))+(((4.74696204184007)*x1042))+((x1007*x991))+(((-1.0)*sj0*x1006*x1017))+(((0.28)*r01*x992))+(((1.288)*r02))+(((-1.0)*x1008*x1022))+(((-1.0)*x1030*x1033))+((x1004*x1028))+(((0.32886)*cj0*py*x1007))+(((-1.0)*r00*x1000*x1006))+(((-1.0)*x1012*x1035))+((pz*x1010*x994))+(((-1.0)*cj0*px*x1000*x997))+(((-1.0)*cj1*x1000*x1020))+((x1010*x1011))+(((-1.0)*cj0*px*x996))+((x1030*x989))+(((-1.0)*x1028*x999))+(((-1.0)*sj1*x1010*x1038)));
evalcond[7]=((((3.10626111149563)*sj3*x1036))+(((-1.0)*x1037*x1038))+(((0.32886)*x1004*x1005))+(((-0.28)*x1005*x1025))+(((4.74696204184007)*x1036))+(((-1.0)*x1038*x997))+((x1021*x993))+((x1012*x1040))+((pz*x996))+((r00*x1000*x1008))+(((21.1133627751)*x997))+((x990*x997))+(((-1.288)*x1025))+(((-2.0)*py*x1004*x1006))+(((-3.70186726176546)*cj4*x1034))+(((-1.0)*cj0*r02*x1000*x1006))+(((-2.0)*r00*x1006*x995))+(((-1.512756)*x999))+(((-1.0)*x1033*x997))+(((9.2)*x1020))+(((-1.0)*x1000*x1007*x995))+(((9.2)*x1016))+(((0.28)*x1026*x992))+((x1020*x994))+(((-1.288)*x1010))+(((-21.1525627751)*r01*x1014))+((pz*r02*x994))+(((0.28)*cj0*px*x997))+((x1004*x1015))+(((-1.0)*cj0*x1017*x992))+(((-21.1525627751)*x1037))+((x1018*x1035))+(((-1.0)*cj0*x1005*x1009))+((r01*x1000*x992))+(((3.983206999508)*x1042))+((x1037*x990))+((x1037*x991))+(((-1.0)*sj0*x1005*x993))+(((-1.0)*x1015*x999))+(((1.512756)*x1004))+((x1016*x994))+(((-1.0)*x1006*x1022))+((r01*x1014*x990))+(((0.32886)*x1013*x997))+((r01*x1014*x989))+(((-1.0)*r01*x1014*x1033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "5a9fa759f239b999bcc3da987d7abc88"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
